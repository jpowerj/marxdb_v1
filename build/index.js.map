{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/routes/fetch/reg.$authName.$perPage.$pageNum.tsx", "../app/models/docinfo.server.ts", "../app/routes/fetch/chron.$perPage.$pageNum.tsx", "../app/models/event.server.ts", "../app/routes/fetch/gloss.$perPage.$pageNum.tsx", "../app/models/entity.server.ts", "../app/routes/fetch/reg.fulltext.$regCode.tsx", "../app/routes/fetch/reg.details.$regCode.tsx", "../app/routes/fetch/chron.search.$query.tsx", "../app/routes/fetch/chron.count.tsx", "../app/routes/fetch/gloss.count.tsx", "../app/routes/gloss/$glossCode.tsx", "../app/components/entityDetails.tsx", "../app/routes/fetch/reg.count.tsx", "../app/routes/gloss_datatable.tsx", "../app/routes/gloss/index.tsx", "../app/routes/letters.tsx", "../app/routes/chron.tsx", "../app/routes/chron/$chronCode.tsx", "../app/components/eventDetails.tsx", "../app/routes/chron/cal.tsx", "../app/routes/index.tsx", "../app/routes/notes.tsx", "../app/routes/sand.tsx", "../app/routes/reg.tsx", "../app/routes/reg/$regCode.fulltext.tsx", "../app/components/entryDetails.tsx", "../app/routes/reg/$regCode.tsx", "../app/routes/at.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { LinksFunction, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Form,\n  Link,\n  Links,\n  LiveReload,\n  Meta,\n  NavLink,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLocation,\n  useLoaderData\n} from \"@remix-run/react\";\nimport {\n  StyledEngineProvider,\n  ThemeProvider,\n  createTheme,\n  responsiveFontSizes\n} from '@mui/material/styles';\n\nconst robotoUrl = \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\";\n\nimport tailwindStylesheetUrl from \"./styles/tailwind.css\";\n\nexport const links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: tailwindStylesheetUrl },\n    { rel: \"stylesheet\", href: robotoUrl }\n  ];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Marx-Engels Digital Cyclopedia\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nimport * as React from 'react';\nimport { styled, useTheme, Theme, CSSObject } from '@mui/material/styles';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport MenuBookIcon from '@mui/icons-material/MenuBook';\nimport MuiDrawer from '@mui/material/Drawer';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nconst dbs = [\n  {\n    name: \"Home\",\n    fullname: \"Marx-Engels Digital Cyclopedia\",\n    route: \"\",\n    icon: \"\uD83C\uDFE0\",\n  },\n  {\n    name: \"Register\",\n    fullname: \"Marx-Engels Digital Register\",\n    route: \"reg/marx\",\n    icon: \"\uD83D\uDCD5\",\n  },\n  {\n    name: \"Chronicle\",\n    fullname: \"Marx-Engels Digital Chronicle\",\n    route: \"chron/list\",\n    icon: \"\uD83D\uDCC5\",\n  },\n  /*\n  {\n    name: \"Notebooks\",\n    fullname: \"Marx-Engels Digital Notebooks\",\n    route: \"notes\",\n    icon: \"\uD83D\uDCD3\",\n  },\n  */\n  {\n    name: \"Letters\",\n    fullname: \"Marx-Engels Digital Correspondence\",\n    route: \"letters\",\n    icon: \"\u2709\uFE0F\"\n  },\n  {\n    name: \"Library\",\n    fullname: \"Marx-Engels Digital Library\",\n    route: \"lib/\",\n    icon: \"\uD83C\uDFDB\uFE0F\"\n  },\n  {\n    name: \"Glossary\",\n    fullname: \"Marx-Engels Digital Glossary\",\n    route: \"gloss/\",\n    //icon: \"\uD83D\uDCD9\",\n    icon: \"\uD83D\uDD0D\"\n  },\n  /*\n  {\n    name: \"Sandbox\",\n    fullname: \"Sandbox\",\n    route: \"sand\",\n    icon: \"\u23F3\",\n  }\n  */\n];\n\n// Drawer Width\nconst drawerWidth = 180;\n\nconst openedMixin = (theme: Theme): CSSObject => ({\n  width: drawerWidth,\n  transition: theme.transitions.create(['width','margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n  overflowX: 'hidden',\n});\n\nconst openedMixinOverlay = (theme: Theme): CSSObject => ({\n  width: drawerWidth,\n  transition: theme.transitions.create(['width'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n  overflowX: 'hidden',\n});\n\nconst closedMixin = (theme: Theme): CSSObject => ({\n  transition: theme.transitions.create(['width','margin'], {\n    easing: theme.transitions.easing.easeOut,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: 0,\n  [theme.breakpoints.up('sm')]: {\n    width: 0,\n  },\n});\n\nconst closedMixinOverlay = (theme: Theme): CSSObject => ({\n  transition: theme.transitions.create(['width'], {\n    easing: theme.transitions.easing.easeOut,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: 0,\n  [theme.breakpoints.up('sm')]: {\n    width: 0,\n  },\n});\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n}));\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar)<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  backgroundColor: getAppBarColor(),\n}));\n\nlet headerDict: { [key: string]: string } = {\n  \"/reg\": \"Marx-Engels Digital Register\",\n  \"/chron\": \"Marx-Engels Digital Chronicle\",\n  \"/notes\": \"Marx-Engels Digital Notebooks\",\n  \"/letters\": \"Marx-Engels Digital Correspondence\",\n  \"/gloss\": \"Marx-Engels Digital Glossary\",\n}\nfunction getAppBarHeader(pathname: string) {\n  // The root page \"/\" is a special case here\n  if (pathname === \"/\") {\n    return \"Marx-Engels Digital Cyclopedia\";\n  }\n  let headerKeys = Object.keys(headerDict);\n  for (var i=0; i < headerKeys.length; i++) {\n    let curHeaderKey = headerKeys[i];\n    if (pathname.startsWith(curHeaderKey)) {\n      return headerDict[curHeaderKey];\n    }\n  }\n  return null;\n}\n\n/*let colorDict: { [key: string]: string } = {\n  \"/\": \"bg-blue-500\",\n  \"/reg\": \"bg-red-500\",\n  \"/chron\": \"bg-green-500\",\n}*/\n// From https://tailwindcss.com/docs/background-color\n// https://tailwindcss.com/docs/customizing-colors\nlet colorRGBDict: { [key: string]: string } = {\n  \"amber-500\": \"#F59E0B\",\n  \"amber-600\": \"#D97706\",\n  \"slate-500\": \"rgb(100 116 139)\",\n  \"green-500\": \"rgb(34 197 94)\",\n  \"green-700\": \"rgb(21 128 61)\",\n  \"red-500\": \"rgb(239 68 68)\",\n  \"red-700\": \"rgb(185 28 28)\",\n  \"blue-500\": \"rgb(59 130 246)\",\n  \"sky-700\": \"rgb(3 105 161)\",\n  \"violet-500\": \"#8B5CF6\",\n  \"violet-600\": \"#7C3AED\",\n}\nfunction colorToRGB(colorName: string): string {\n  return colorRGBDict[colorName];\n}\nlet colorDict: { [key: string]: string } = {\n  \"/reg\": colorToRGB(\"sky-700\"),\n  \"/chron\": colorToRGB(\"red-700\"),\n  \"/notes\": colorToRGB(\"amber-600\"),\n  \"/letters\": colorToRGB(\"violet-600\"),\n  \"/gloss\": colorToRGB(\"green-700\"),\n};\nfunction getAppBarColor() {\n  const location = useLocation();\n  if (location.pathname === \"/\") {\n    return colorToRGB(\"slate-500\");\n  }\n  let colorKeys = Object.keys(colorDict);\n  for (var i = 0; i < colorKeys.length; i++) {\n    let curColorKey = colorKeys[i];\n    if (location.pathname.startsWith(curColorKey)) {\n      return colorDict[curColorKey];\n    }\n  }\n  return colorToRGB(\"slate-500\");\n}\n\n\n/*\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n*/\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n  ({ theme, open }) => ({\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n    boxSizing: 'border-box',\n    ...(open && {\n      ...openedMixin(theme),\n      '& .MuiDrawer-paper': openedMixin(theme),\n    }),\n    ...(!open && {\n      ...closedMixin(theme),\n      '& .MuiDrawer-paper': closedMixin(theme),\n    }),\n  }),\n);\n\nconst OverlayDrawer = styled(MuiDrawer)(\n  ({ theme, open }) => ({\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n    boxSizing: 'border-box',\n    ...(open && {\n      ...openedMixinOverlay(theme),\n      '& .MuiDrawer-paper': openedMixinOverlay(theme),\n    }),\n    ...(!open && {\n      ...closedMixinOverlay(theme),\n      '& .MuiDrawer-paper': closedMixinOverlay(theme),\n    }),\n  }),\n);\n\n\nconst themeOptions = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#3f51b5',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n  },\n};\n\nconst theme = responsiveFontSizes(createTheme(themeOptions));\ntheme.typography.h4 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem',\n  },\n  [theme.breakpoints.up('md')]: {\n    fontSize: '2.0rem',\n  },\n};\n\nexport function MainUI() {\n  const theme = useTheme();\n  theme.typography.h3 = {\n    fontSize: '1.2rem',\n    '@media (min-width:600px)': {\n      fontSize: '1.5rem',\n    },\n    [theme.breakpoints.up('md')]: {\n      fontSize: '2.4rem',\n    },\n  };\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerClick = () => {\n    setOpen(!open);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const location = useLocation();\n  //console.log(\"location\");\n  //console.log(location);\n\n  const drawer = (\n    <div className=\"h-full border-r bg-gray-50\">\n      <Toolbar />\n      <Box sx={{ overflow: 'auto', overflowX: 'hidden' }}>\n        <ol>\n        {dbs.map((db, index) => (\n          <li key={db.route}>\n            <NavLink\n              className={({ isActive }) =>\n                `block border-b p-4 text-xl ${isActive ? \"bg-white\" : \"bg-gray-50\"}`\n              }\n              to={db.route}\n            >\n              {db.icon}{\" \"}{open ? db.name : \"\"}\n            </NavLink>\n          </li>\n        ))}\n        </ol>\n      </Box>\n    </div>\n  );\n\n  return (\n    <Box\n      sx={{ display: 'flex' }}\n    >\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        sx={{\n          zIndex: (theme) => theme.zIndex.drawer + 1\n        }}\n      >\n        <Toolbar>\n          <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerClick}\n              edge=\"start\"\n              sx={{\n                marginRight: 1,\n              }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h4\" noWrap component=\"div\" sx={{flex:1}}>\n            {getAppBarHeader(location.pathname)}\n          </Typography>\n          <a href=\"https://github.com/jpowerj/digital-marxism/\" target='_blank'>\n          <IconButton\n            component=\"div\"\n            color=\"inherit\"\n            edge=\"end\"\n          >\n            <GitHubIcon sx={{ fontSize: '2.2rem' }} />\n          </IconButton>\n          </a>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        sx={{\n          display: { xs: 'none', sm: 'block' },\n          width: drawerWidth,\n          height: '100%',\n          //flexShrink: 0,\n          overflowX: 'hidden',\n          overflowY: 'scroll',\n          '& .MuiDrawer-paper': { \n            boxSizing: 'border-box',\n            //flexShrink: 0,\n            overflowX: 'hidden',\n            overflowY: 'scroll',\n          },\n        }}\n        open={open}\n      >\n        {drawer}\n      </Drawer>\n      <MuiDrawer\n          variant=\"temporary\"\n          open={open}\n          onClose={handleDrawerClose}\n          onClick={handleDrawerClose}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            width: drawerWidth,\n            overflowX: 'hidden',\n            overflowY: 'scroll',\n            '& .MuiDrawer-paper': { overflowX: 'hidden', overflowY: 'scroll', width: drawerWidth, boxSizing: 'border-box' },\n          }}\n          disableScrollLock={true}\n          anchor=\"left\"\n        >\n          {drawer}\n      </MuiDrawer>\n      <Box\n        component=\"main\"\n        sx={{ flexGrow: 1, p: 2, overflow: 'hidden', overflowY: 'scroll' }}\n        className=\"w-full h-screen max-h-screen flex flex-col\"\n      >\n        <Toolbar className=\"flex-none\" />\n        <Outlet />\n      </Box>\n    </Box>\n  );\n}\n\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full m-0\">\n      <ThemeProvider theme={theme}>\n        <MainUI />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getDocinfoPage } from \"~/models/docinfo.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.authName, \"Expected params.authName\");\n    invariant(params.perPage, \"Expected params.perPage\");\n    invariant(params.pageNum, \"Expected params.pageNum\");\n    let ppInt = Number(params.perPage) || 10;\n    let pnInt = Number(params.pageNum) || 0;\n    let result = await getDocinfoPage(params.authName, ppInt, pnInt);\n    //console.log(result);\n    return {\n        docs: result.documents,\n        shown: result.showCount,\n        total: result.totalCount\n    };\n}\n", "const axios = require('axios');\nconst whichDB = process.env.WHICH_DB;\nconst whichFulltext = process.env.WHICH_FULLTEXT;\n// Airtable\nconst Airtable = require('airtable');\nconst atBaseKey = \"appnZn2NYRxLtEvsT\";\nconst atBase = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(atBaseKey);\nconst regBaseName = \"M00_Register\";\n// GDrive\nconst fs = require('fs').promises;\nconst { authenticate } = require('@google-cloud/local-auth');\nconst { google } = require('googleapis');\nconst path = require('path');\n\nfunction getSectionEntryNum(auth: string) {\n  // Sigh, it's hackish but best I can do for now\n  if (auth === \"engels\") {\n    return 0;\n  } else if (auth === \"marx\") {\n    return 961;\n  } else if (auth === \"me\") {\n    return 1982;\n  } else {\n    return 2174;\n  }\n}\n\nfunction genConfig(data: any, action: string) {\n  return {\n    method: \"post\",\n    url: process.env.MONGO_API_BASE_URL + \"/action/\" + action,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Request-Headers\": \"*\",\n      \"api-key\": process.env.MONGO_API_KEY\n    },\n    data\n  };\n}\n\n// Test code for spread (...) operator:\n// https://replit.com/@jpowerj/IllustriousMeekLaw#index.ts\nfunction genDataObj({...dataArgs}) {\n  let dataObj = JSON.stringify({\n    collection: \"register\",\n    database: \"marxdb\",\n    dataSource: process.env.MONGO_CLUSTER_NAME,\n    ...dataArgs\n  });\n  return dataObj;\n}\n\nexport async function getDocinfoCountMongo() {\n  let pipeline = [{ $count: \"count\" }];\n  let data = genDataObj({'pipeline': pipeline});\n  let config = genConfig(data, \"aggregate\");\n  let result = await axios(config);\n  return result?.data?.documents[0]?.count;\n}\n\nexport async function getDocinfoCountAirtable() {\n  let result = await atBase(regBaseName).select({\n    view: 'all_grid',\n    fields: []\n  }).all();\n  return result.length;\n}\n\nexport async function getDocinfoCount() {\n  if (whichDB === \"airtable\") {\n    return getDocinfoCountAirtable();\n  } else {\n    return getDocinfoCountMongo();\n  }\n}\n\nexport async function getDocinfoListItems({ request }: { request: any }) {\n  //let pipeline = [{ $limit: 100 }];\n  // https://www.mongodb.com/docs/atlas/api/data-api-resources/\n  //console.log(request);\n  let dataOptions = {'limit': 10, 'sort': 'ent_id'};\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"find\");\n  let entries = await axios(config);\n  let totalFound = await getDocinfoCount();\n  return {\n    showCount: entries?.data?.documents?.length,\n    totalCount: totalFound,\n    documents: entries?.data?.documents\n  };\n}\n\nexport async function getDocinfoPageTotal(filterOptions: any) {\n  let dataOptions = {\n    sort: {'ent_id': 1},\n    filter: filterOptions\n  };\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"find\");\n  let entries = await axios(config);\n  return entries?.data?.documents?.length;\n}\n\nexport async function getDocinfoPageTotalAirtable(regSection: string) {\n  let filterFormula = \"{reg_section} = '\" + regSection + \"'\"\n  //console.log(\"Getting airtable count with formula:\");\n  //console.log(filterFormula);\n  let result = await atBase(regBaseName).select({\n    view: 'all_grid',\n    fields: [],\n    filterByFormula: filterFormula\n  }).all();\n  return result.length;\n}\n\nlet regSectionDict: { [key: string]: string } = {\n  \"marx\": \"M\",\n  \"engels\": \"E\",\n  \"me\": \"ME\",\n  \"st\": \"ST\",\n}\nfunction authNameToRegSection(authName: string): string {\n  // Special case for ST\n  return regSectionDict[authName];\n}\n\nexport async function getDocinfoPageAirtable(\n  authName: string, perPage: number, pageNum: number\n) {\n  // Start num for the author\n  let authStartNum = getSectionEntryNum(authName);\n  // Compute the section entry_num\n  let sectionEntryNum = perPage * pageNum;\n  // So add them to get the overall num\n  let startEntryNum = authStartNum + sectionEntryNum;\n  let results = await atBase(regBaseName).select({\n    view: 'all_grid',\n    filterByFormula: \"{entry_num} >= \" + startEntryNum,\n    maxRecords: perPage\n  }).all();\n  // But, we need to extract just the \"fields\" attribute from each\n  let resultsFields = results.map((x: any) => x.fields);\n  let regSection = authNameToRegSection(authName);\n  let totalFound = await getDocinfoPageTotalAirtable(regSection);\n  return {\n    showCount: results.length,\n    totalCount: totalFound,\n    documents: resultsFields\n  };\n}\n\nexport async function getDocinfoPageMongo(authName: string, perPage: number, pageNum: number) {\n  //console.log(process.env);\n  let start = perPage * pageNum;\n  let end = start + perPage;\n  // We want to skip max(0, start-1) pages\n  let numToSkip = Math.max(start-1, 0);\n  let cancelledFilter = {'cancelled': {'$ne': true}};\n  // Special case for ST\n  let rsFilter = {};\n  if (authName === \"st\") {\n    rsFilter = {'reg_section': { '$regex': 'ST' } };\n  } else {\n    let regSection = authNameToRegSection(authName);\n    rsFilter = { 'reg_section': { '$eq': regSection } };\n  }\n  let filterOptions = { ...cancelledFilter, ...rsFilter };\n  let dataOptions = {\n    skip: numToSkip,\n    limit: perPage,\n    sort: { 'ent_id': 1 },\n    filter: filterOptions\n  }\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"find\");\n  let entries = await axios(config);\n  let totalFound = await getDocinfoPageTotal(filterOptions);\n  return {\n    showCount: entries?.data?.documents?.length,\n    totalCount: totalFound,\n    documents: entries?.data?.documents\n  };\n}\n\nexport async function getDocinfoPage(authName: string, perPage: number, pageNum: number) {\n  if (whichDB === \"airtable\") {\n    //console.log(process.env.WHICH_DB);\n    //console.log(\"Getting page via airtable\");\n    return getDocinfoPageAirtable(authName, perPage, pageNum);\n  } else {\n    return getDocinfoPageMongo(authName, perPage, pageNum);\n  }\n}\n\n// Getting a single item's info\n\nexport async function getDocinfoMongo(regCode: string) {\n  let dataOptions = {\n    filter: { 'ent_id': { '$eq': regCode } }\n  }\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"findOne\");\n  let entries = await axios(config);\n  console.log(\"[getDocinfo] entries = \" + Object.keys(entries.data));\n  let docResult = entries?.data?.document;\n  console.log(\"[getDocinfo] returning \" + docResult);\n  return docResult;\n}\n\nexport async function getDocinfoAirtable(regCode: string) {\n  console.log(\"[getDocInfoAirtable()]\");\n  let result = await atBase(regBaseName).select({\n    view: 'all_grid',\n    filterByFormula: \"{entry_id} = '\" + regCode + \"'\"\n  }).all();\n  return result[0].fields;\n}\n\nexport async function getDocinfo(regCode: string) {\n  if (whichDB === \"mongo\") {\n    return getDocinfoMongo(regCode);\n  } else {\n    return getDocinfoAirtable(regCode);\n  }\n}\n\n/////\n// GDRIVE\n/////\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/drive.readonly'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconst TOKEN_PATH = path.join(process.cwd(), 'gdrive', 'token.json');\nconst CREDENTIALS_PATH = path.join(process.cwd(), 'gdrive', 'credentials.json');\n\n/**\n * Serializes credentials to a file comptible with GoogleAUth.fromJSON.\n *\n * @param {OAuth2Client} client\n * @return {Promise<void>}\n */\nasync function saveCredentials(client: any) {\n  const content = await fs.readFile(CREDENTIALS_PATH);\n  const keys = JSON.parse(content);\n  const key = keys.installed || keys.web;\n  const payload = JSON.stringify({\n    type: 'authorized_user',\n    client_id: key.client_id,\n    client_secret: key.client_secret,\n    refresh_token: client.credentials.refresh_token,\n  });\n  await fs.writeFile(TOKEN_PATH, payload);\n}\n\n/**\n * Load or request or authorization to call APIs.\n *\n */\nasync function authorize() {\n  let client = await loadSavedCredentialsIfExist();\n  if (client) {\n    return client;\n  }\n  client = await authenticate({\n    scopes: SCOPES,\n    keyfilePath: CREDENTIALS_PATH,\n  });\n  if (client.credentials) {\n    await saveCredentials(client);\n  }\n  return client;\n}\n\n/**\n * Reads previously authorized credentials from the save file.\n *\n * @return {Promise<OAuth2Client|null>}\n */\nasync function loadSavedCredentialsIfExist() {\n  try {\n    const content = await fs.readFile(TOKEN_PATH);\n    const credentials = JSON.parse(content);\n    return google.auth.fromJSON(credentials);\n  } catch (err) {\n    return null;\n  }\n}\n\n/**\n * Lists the names and IDs of up to 10 files.\n * @param {OAuth2Client} authClient An authorized OAuth2 client.\n */\nexport async function getGDriveFile(authClient: any, fileId: string) {\n  const drive = google.drive({ version: 'v3', auth: authClient });\n  const meta = await drive.files.get({\n    fileId: fileId,\n    fields: \"name\"\n  });\n  //console.log(\"meta\");\n  //console.log(meta.data.name);\n  const filename = meta.data.name;\n  const res = await drive.files.get({\n    fileId: fileId,\n    alt: \"media\"\n  })\n  //console.log(\"res.data\");\n  //console.log(res.data);\n  return {\n    filename: filename,\n    fulltext: res.data\n  }\n}\n\nexport async function getFulltextDrive(regCode: string) {\n  // First get the drive_id from mongo\n  let mongoDoc = await getFulltextMongo(regCode);\n  let driveId = mongoDoc.drive_id;\n  // And now get the text for that drive_id from gdrive\n  let client = await authorize();\n  let fulltextData = await getGDriveFile(client, driveId);\n  return {\n    entry_id: mongoDoc.ent_id,\n    title: mongoDoc.title,\n    fulltext_filename: fulltextData.filename,\n    drive_id: driveId,\n    fulltext: fulltextData.fulltext\n  }\n}\n\nexport async function getFulltextMongo(regCode: string) {\n  let dataOptions = {\n    filter: { 'ent_id': { '$eq': regCode } },\n    projection: {\n      'fulltext': 1,\n      'fulltext_filename': 1,\n      'drive_id': 1,\n      'ent_id': 1,\n      'title': 1 }\n  }\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"findOne\");\n  let entry = await axios(config);\n  let docResult = entry?.data?.document;\n  console.log(\"[getFulltext()] \" + docResult);\n  return docResult;\n}\n\nexport async function getFulltext(regCode: string) {\n  if (whichFulltext === \"mongo\") {\n    return getFulltextMongo(regCode);\n  } else {\n    return getFulltextDrive(regCode);\n  }\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getEventPage } from \"~/models/event.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.perPage, \"Expected params.perPage\");\n    invariant(params.pageNum, \"Expected params.pageNum\");\n    let ppInt = Number(params.perPage) || 10;\n    let pnInt = Number(params.pageNum) || 0;\n    let result = await getEventPage(ppInt, pnInt);\n    return {\n        docs: result.documents,\n        shown: result.showCount,\n        total: result.totalCount\n    };   \n}\n", "const axios = require('axios');\r\nconst { MongoClient } = require(\"mongodb\");\r\n// Connection URI\r\nconst mongoUri = \"mongodb+srv://admin:\" + process.env.MONGO_ADMIN_PW + \"@cluster0.cg6nz.mongodb.net/test\";\r\n// Create a new MongoClient\r\nconst client = new MongoClient(mongoUri);\r\n\r\nfunction genConfig(data: any, action: string) {\r\n    return {\r\n        method: \"post\",\r\n        url: process.env.MONGO_API_BASE_URL + \"/action/\" + action,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Request-Headers\": \"*\",\r\n            \"api-key\": process.env.MONGO_API_KEY\r\n        },\r\n        data\r\n    };\r\n}\r\n\r\n// Test code for spread (...) operator:\r\n// https://replit.com/@jpowerj/IllustriousMeekLaw#index.ts\r\nfunction genDataObj({ ...dataArgs }) {\r\n    let dataObj = JSON.stringify({\r\n        collection: \"chronicle\",\r\n        database: \"marxdb\",\r\n        dataSource: process.env.MONGO_CLUSTER_NAME,\r\n        ...dataArgs\r\n    });\r\n    return dataObj;\r\n}\r\n\r\nfunction addMonthday(rowData: any) {\r\n    // Compute a monthday field\r\n    rowData.monthday = (rowData.month_start || \"\") + \" \" + (rowData.day_start || \"\")\r\n    rowData.ymd = rowData.year + \" \" + rowData.monthday;\r\n    return rowData;\r\n}\r\n\r\nexport async function getEventCount() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    let data = genDataObj({ 'pipeline': pipeline });\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEventPageTotal() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    \r\n    let data = genDataObj({'pipeline': pipeline});\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEventPage(perPage: number, pageNum: number) {\r\n    //console.log(process.env);\r\n    let start = perPage * pageNum;\r\n    let end = start + perPage;\r\n    // We want to skip max(0, start-1) pages\r\n    let numToSkip = Math.max(start - 1, 0);\r\n    let dataOptions = {\r\n        skip: numToSkip,\r\n        limit: perPage,\r\n        sort: { 'entry_id_clean': 1 },\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"find\");\r\n    let entries = await axios(config);\r\n    for (var i=0; i < entries.data.documents.length; i++) {\r\n        let rowData = entries.data.documents[i];\r\n        // Compute a monthday field\r\n        let curMonthday = (rowData.month_start || \"\") + \" \" + (rowData.day_start || \"\")\r\n        let curYmd = rowData.year + \" \" + curMonthday;\r\n        entries.data.documents[i].monthday = curMonthday;\r\n        entries.data.documents[i].ymd = curYmd;\r\n    }\r\n    let totalFound = await getEventPageTotal();\r\n    return {\r\n        showCount: entries?.data?.documents?.length,\r\n        totalCount: totalFound,\r\n        documents: entries?.data?.documents\r\n    };\r\n}\r\n\r\nexport async function getEvent(chronCode: string) {\r\n    let dataOptions = {\r\n        filter: { 'entry_id_clean': { '$eq': chronCode } }\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"findOne\");\r\n    let entries = await axios(config);\r\n    console.log(\"[getEvent] entries = \" + Object.keys(entries.data));\r\n    let docResult = entries?.data?.document;\r\n    console.log(\"[getEvent] returning \" + docResult);\r\n    docResult = addMonthday(docResult);\r\n    return docResult;\r\n}\r\n\r\nexport async function searchEvents(query: string) {\r\n    await client.connect();\r\n    const coll = client.db(\"marxdb\").collection(\"chronicle\");\r\n    //const mongoQuery = { $text: { '$search': \"Paris\" } };\r\n    const mongoQuery = { $text: {'$search': query }};\r\n    console.log(\"mongoQuery: \" + JSON.stringify(mongoQuery));\r\n    // Establish and verify connection\r\n    //const result = await client.db(\"admin\").command({ ping: 1 });\r\n    //console.log(\"result: \" + JSON.stringify(result));\r\n    // Ensures that the client will close when you finish/error\r\n    //const blankResult = await db.collection(\"chronicle\").find({}).count();\r\n    //console.log(\"blankResult: \" + blankResult);\r\n    const projection = {\r\n        _id: 1,\r\n        text: 1,\r\n    };\r\n    let cursorFull = coll.find(mongoQuery);\r\n    let totalCount = await cursorFull.count();\r\n    const limit = 10;\r\n    const sort = {\r\n        'entry_id': 1\r\n    };\r\n    let cursorLimited = coll.find(mongoQuery, { sort, limit });\r\n    let results = await cursorLimited.toArray();\r\n    //console.log(\"[getEvent] results = \" + JSON.stringify(results));\r\n    //console.log(\"[getEvent] entries = \" + Object.keys(entries.data));\r\n    //docResult = addMonthday(docResult);\r\n    await client.close();\r\n    //return docResult;\r\n    return {\r\n        documents: results,\r\n        showCount: limit,\r\n        totalCount: totalCount\r\n    };\r\n}", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getEntityPage } from \"~/models/entity.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.perPage, \"Expected params.perPage\");\n    invariant(params.pageNum, \"Expected params.pageNum\");\n    let ppInt = Number(params.perPage) || 10;\n    let pnInt = Number(params.pageNum) || 0;\n    let result = await getEntityPage(ppInt, pnInt);\n    return {\n        docs: result.documents,\n        shown: result.showCount,\n        total: result.totalCount\n    };   \n}\n", "const axios = require('axios');\r\n\r\nfunction genConfig(data: any, action: string) {\r\n    return {\r\n        method: \"post\",\r\n        url: process.env.MONGO_API_BASE_URL + \"/action/\" + action,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Request-Headers\": \"*\",\r\n            \"api-key\": process.env.MONGO_API_KEY\r\n        },\r\n        data\r\n    };\r\n}\r\n\r\n// Test code for spread (...) operator:\r\n// https://replit.com/@jpowerj/IllustriousMeekLaw#index.ts\r\nfunction genDataObj({ ...dataArgs }) {\r\n    let dataObj = JSON.stringify({\r\n        collection: \"glossary\",\r\n        database: \"marxdb\",\r\n        dataSource: process.env.MONGO_CLUSTER_NAME,\r\n        ...dataArgs\r\n    });\r\n    return dataObj;\r\n}\r\n\r\nexport async function getEntityCount() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    let data = genDataObj({ 'pipeline': pipeline });\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEntityPageTotal() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    let data = genDataObj({ 'pipeline': pipeline });\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEntityPage(perPage: number, pageNum: number) {\r\n    //console.log(process.env);\r\n    let start = perPage * pageNum;\r\n    let end = start + perPage;\r\n    // We want to skip max(0, start-1) pages\r\n    let numToSkip = Math.max(start - 1, 0);\r\n    let dataOptions = {\r\n        skip: numToSkip,\r\n        limit: perPage,\r\n        sort: { 'id': 1 },\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"find\");\r\n    let entries = await axios(config);\r\n    let totalFound = await getEntityPageTotal();\r\n    return {\r\n        showCount: entries?.data?.documents?.length,\r\n        totalCount: totalFound,\r\n        documents: entries?.data?.documents\r\n    };\r\n}\r\n\r\nexport async function getEntity(entCode: string) {\r\n    let dataOptions = {\r\n        filter: { 'id': { '$eq': entCode } }\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"findOne\");\r\n    let entries = await axios(config);\r\n    console.log(\"[getEntity] entries = \" + Object.keys(entries.data));\r\n    let docResult = entries?.data?.document;\r\n    console.log(\"[getEntity] returning \" + docResult);\r\n    return docResult;\r\n}\r\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { getFulltext } from \"~/models/docinfo.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    let result = await getFulltext(params.regCode);\n    return result;\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { getDocinfo } from \"~/models/docinfo.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    let result = await getDocinfo(params.regCode);\n    return result;\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { searchEvents } from \"~/models/event.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.query, \"Expected params.query\");\n    let result = await searchEvents(params.query);\n    return {\n        docs: result.documents,\n        shown: result.showCount,\n        total: result.totalCount\n    };   \n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getDocinfoCount } from \"~/models/docinfo.server\";\nimport { getEventCount } from \"~/models/event.server\";\n\n// Maps url shorthand to Mongo collection name\nlet dbIdMap: { [key: string]: string } = {\n    'reg': 'register',\n    'chron': 'chronicle',\n}\n\nexport async function loader({ request, params }: LoaderArgs) {\n    let result = await getEventCount();\n    return result;\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getEntityCount } from \"~/models/entity.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    let result = await getEntityCount();\n    return result;\n}\n", "import * as React from 'react';\r\nimport type { LoaderArgs } from \"@remix-run/node\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\nimport { json } from \"@remix-run/node\";\r\n\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EntityDetailsPanel } from '~/components/entityDetails'\r\nimport { getEntity } from '~/models/entity.server';\r\n\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n    invariant(params.glossCode, \"Expected params.glossCode\");\r\n    let glossCode = params.glossCode;\r\n    console.log(\"[$glossCode.tsx] glossCode: \" + glossCode);\r\n    let entityData = await getEntity(glossCode);\r\n    return { glossCode: glossCode, entityData: entityData };\r\n}\r\n\r\nexport default function EntityDetailsPage() {\r\n    const reqData = useLoaderData();\r\n    let entityData = reqData.entityData;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <NavLink to={`../../gloss/`}>\r\n                    <Button startIcon={<ArrowBackIcon />}>\r\n                        Back to Glossary\r\n                    </Button>\r\n                </NavLink>\r\n            </div>\r\n            <Paper>\r\n                <EntityDetailsPanel data={entityData} />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n", "import * as React from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Chip from '@mui/material/Chip';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { NavLink } from '@remix-run/react';\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\n\r\nexport function EntityDetailsPanel(props: any) {\r\n    let rowData = props.data;\r\n    console.log(\"[entityDetails] rowData: \" + Object.keys(rowData));\r\n    const [tooltipText, setTooltipText] = React.useState(\"Copy Link\");\r\n    const handleTooltipClose = () => {\r\n        setTooltipText(\"Copy Link\");\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                fontSize: 16,\r\n                padding: 5,\r\n                margin: 5,\r\n            }}\r\n        >\r\n            <Box sx={{ margin: 1 }}>\r\n                <div className=\"grid grid-cols-2 mb-2\">\r\n                    <div className=\"h-full\">\r\n                        <Typography variant=\"h5\" className=\"inline-flex align-middle font-bold\">\r\n                            {rowData.id}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className=\"self-center float-right\">\r\n                        <Tooltip title={tooltipText}>\r\n                            <Chip\r\n                                icon={<LinkIcon />}\r\n                                label={rowData.id}\r\n                                variant=\"outlined\"\r\n                                className=\"float-right\"\r\n                                onMouseLeave={handleTooltipClose}\r\n                                onClick={() => {\r\n                                    //alert('clicked');\r\n                                    navigator.clipboard.writeText(`https://marxdb.com/gloss/${rowData.id}`).then(\r\n                                        function () {\r\n                                            /* clipboard successfully set */\r\n                                            console.log('Success! The text was copied to your clipboard');\r\n                                            setTooltipText(\"Link Copied!\");\r\n                                        },\r\n                                        function () {\r\n                                            /* clipboard write failed */\r\n                                            console.log('Oops! Your browser does not support the Clipboard API');\r\n                                        }\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Tooltip>\r\n                    </div>\r\n                </div>\r\n                <Table size=\"small\" aria-label=\"details\">\r\n                    <TableBody>\r\n                        <TableRow key='header' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Heading\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-bold\">{rowData.header}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='desc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Description\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-mono\">{rowData.text}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='dates'>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Written\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {rowData.written}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Dated\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"dated\") > - 1 ? rowData.dated : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Published\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"published\") > - 1 ? rowData.published : \"NA\"}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {(Object.keys(rowData).indexOf(\"lang_orig\") > -1) &&\r\n                            <TableRow key='langs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Language(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.lang_orig.join(\", \")}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"source\") > -1) &&\r\n                            <TableRow key='sources' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Source(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.source}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"reprint\") > -1) &&\r\n                            <TableRow key='reprints' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Reprints\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.reprint}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"more_info\") > -1) &&\r\n                            <TableRow key='misc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Misc\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.more_info}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"chron_ref_ids\") > -1) &&\r\n                            <TableRow key='chronrefs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Chronicle References\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.chron_ref_ids.map((item: string) => getChronRefLink(item))}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Box>\r\n        </div>\r\n    );\r\n}", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getDocinfoCount } from \"~/models/docinfo.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    let result = await getDocinfoCount();\n    return result;\n}\n", "import * as React from 'react';\nimport { useTheme, withStyles } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport Collapse from '@mui/material/Collapse';\n\nimport Chip from '@mui/material/Chip';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport MaterialTable from \"@material-table/core\";\nimport MTableToolbar from '@material-table/core';\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { getDocinfoListItems } from \"~/models/docinfo.server\";\n\nconst defaultPerPage = 3;\nconst defaultPageNum = 0;\n\nexport async function loader({ request }: LoaderArgs) {\n  const docinfoListItems = await getDocinfoListItems();\n  return json({ docinfoListItems });\n}\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number,\n  ) => void;\n}\n\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction createData(\n  id: string,\n  title: string\n) {\n  return {\n    id,\n    title,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nfunction Row(props: { data: ReturnType<typeof createData> }) {\n  const { data } = props;\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\" sx={{ maxWidth: 100, overflowX: 'clip' }}>\n          {data.id}\n        </TableCell>\n        <TableCell>\n          {data.title}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Text Info\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst EnhancedTableToolbar = () => {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h5\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Marx-Engels Digital Register\n      </Typography>\n    </Toolbar>\n  );\n};\n\nexport default function CollapsibleTable() {\n  const initData = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n  // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n\n  React.useEffect(() => {\n    if (fetcher.type === \"init\") {\n      fetcher.load(`/fetch/gloss/${defaultPerPage}/${defaultPageNum}`);\n    }\n  }, [fetcher]);\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rowsOnPage, setRowsOnPage] = React.useState(5);\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsOnPage) : 0;\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const DEMO_DATA = [\n    { id: 1, name: \"Mary\" },\n    { id: 2, name: \"Joe\" },\n    { id: 3, name: \"Jim\" },\n    { id: 4, name: \"Bob\" },\n    { id: 5, name: \"Bernie\" },\n    { id: 6, name: \"Jimbo\" },\n  ];\n  const DEMO_COLS = [\n    { field: \"id\", title: \"Id\" },\n    { field: \"title\", title: \"Title\" },\n  ];\n  return (\n    <div>\n    {fetcher.type !== \"done\" ? <span>Loading...</span> :\n        <MaterialTable\n          columns={DEMO_COLS}\n          detailPanel={\n            ({ rowData }) => {\n              console.log(rowData);\n              return (\n                <div\n                  style={{\n                    fontSize: 16,\n                    padding: 5,\n                    margin: 5,\n                  }}\n                >\n                  <Box sx={{ margin: 1 }}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                      {rowData.title}\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"details\">\n                      <TableBody>\n                        <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              Full Text\n                            </TableCell>\n                            <TableCell colSpan={5}>{rowData.fullText}</TableCell>\n                          </TableRow>\n                          <TableRow key='dates'>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Written\n                            </TableCell>\n                            <TableCell>\n                              1/1/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Dated\n                            </TableCell>\n                            <TableCell>\n                              1/3/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Published\n                            </TableCell>\n                            <TableCell>\n                              1/2/1850\n                            </TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </Box>\n                </div>\n              );\n            }\n          }\n          data={fetcher.data.result}\n          /*\n          components={{\n            Toolbar: (props: any) => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: '0px 10px' }}>\n                  <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                </div>\n              </div>\n            ),\n          }}\n          */\n        />\n    }\n    </div>\n  );\n}", "import * as React from 'react';\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\n\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EntityDetailsPanel } from '~/components/entityDetails'\r\nimport { getEntity } from '~/models/entity.server';\r\n\r\n/*\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n}\r\n*/\r\n\r\nconst openInNewTab = (url: string) => {\r\n    window.open(url, '_blank', 'noopener,noreferrer');\r\n};\r\n\r\nexport default function GlossTable() {\r\n    const data_cols = [\r\n        { field: \"id\", title: \"ID\", width: \"60px\" },\r\n        { field: \"desc\", title: \"Description\", cellStyle: { width: '65%' }, headerStyle: { width: '65%' } }\r\n    ];\r\n    const fetcher = useFetcher();\r\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\r\n    React.useEffect(() => {\r\n        if (fetcher.type === \"init\") {\r\n            fetcher.load(`/fetch/gloss/10/0`);\r\n        }\r\n    }, [fetcher]);\r\n    /*\r\n    const handleChangePage = (\r\n        event: React.MouseEvent<HTMLButtonElement> | null,\r\n        newPage: number,\r\n    ) => {\r\n        setPage(newPage);\r\n    };\r\n    */\r\n\r\n    /*\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    */\r\n    // MaterialTable documentation:\r\n    // Orig: https://material-table.com/#/\r\n    // Core: https://material-table-core.com/\r\n    // For options:\r\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <MaterialTable\r\n                title={\"Glossary\"}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    padding: 'dense',\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10],\r\n                    columnsButton: true,\r\n                    //showTitle: false,\r\n                    exportAllData: true,\r\n                    initialPage: 0,\r\n                    draggable: false,\r\n                    toolbar: true,\r\n                    //sorting: false,\r\n                    paginationType: 'stepped',\r\n                    numberOfPagesAround: 4\r\n                }}\r\n                columns={data_cols}\r\n                detailPanel={\r\n                    ({ rowData }: any) => <EntityDetailsPanel data={rowData} />\r\n                }\r\n                data={(query) =>\r\n                    new Promise((resolve, reject) => {\r\n                        fetch(`/fetch/gloss/10/${query.page}`)\r\n                            .then(response => response.json())\r\n                            .then(rsJson => {\r\n                                resolve({\r\n                                    data: rsJson.docs,\r\n                                    page: query.page,\r\n                                    totalCount: rsJson.total,\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                components={{\r\n                    Cell: (props) => (\r\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[550px]\" {...props} />\r\n                    ),\r\n                    Container: (props) => (\r\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\r\n                    ),\r\n                    Toolbar: (props) => (\r\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-green-700/10\">\r\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\r\n                        </Box>\r\n                    ),\r\n                    Body: (props) => (\r\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\r\n                    ),\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => (\r\n                            <InfoIcon />\r\n                        ),\r\n                        tooltip: \"View Full Info\",\r\n                        onClick: (event, rowData) => {\r\n                            //const rowJson = JSON.stringify(rowData, null, 2);\r\n                            //alert(`Do save operation : ${rowJson}`);\r\n                            openInNewTab(`./${rowData.id}`)\r\n                        },\r\n                    },\r\n                ]}\r\n                localization={{\r\n                    pagination: {\r\n                        labelDisplayedRows: '{from}-{to} of {count}'\r\n                    },\r\n                    toolbar: {\r\n                        nRowsSelected: '{0} row(s) selected'\r\n                    },\r\n                    header: {\r\n                        actions: ''\r\n                    },\r\n                    body: {\r\n                        emptyDataSourceMessage: 'No records to display',\r\n                        filterRow: {\r\n                            filterTooltip: 'Filter'\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </TableContainer>\r\n    );\r\n}", "import * as React from 'react';\nimport { useTheme, withStyles } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport Collapse from '@mui/material/Collapse';\n\nimport Chip from '@mui/material/Chip';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport MaterialTable from \"@material-table/core\";\nimport MTableToolbar from '@material-table/core';\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { getDocinfoListItems } from \"~/models/docinfo.server\";\n\nconst defaultPerPage = 3;\nconst defaultPageNum = 0;\n\nexport async function loader({ request }: LoaderArgs) {\n  const docinfoListItems = await getDocinfoListItems();\n  return json({ docinfoListItems });\n}\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number,\n  ) => void;\n}\n\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction createData(\n  id: string,\n  title: string\n) {\n  return {\n    id,\n    title,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nfunction Row(props: { data: ReturnType<typeof createData> }) {\n  const { data } = props;\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\" sx={{ maxWidth: 100, overflowX: 'clip' }}>\n          {data.id}\n        </TableCell>\n        <TableCell>\n          {data.title}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Text Info\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst EnhancedTableToolbar = () => {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h5\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Marx-Engels Digital Register\n      </Typography>\n    </Toolbar>\n  );\n};\n\nexport default function CollapsibleTable() {\n  const initData = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n  // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n\n  React.useEffect(() => {\n    if (fetcher.type === \"init\") {\n      fetcher.load(`/fetch/gloss/${defaultPerPage}/${defaultPageNum}`);\n    }\n  }, [fetcher]);\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rowsOnPage, setRowsOnPage] = React.useState(5);\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsOnPage) : 0;\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const DEMO_DATA = [\n    { id: 1, name: \"Mary\" },\n    { id: 2, name: \"Joe\" },\n    { id: 3, name: \"Jim\" },\n    { id: 4, name: \"Bob\" },\n    { id: 5, name: \"Bernie\" },\n    { id: 6, name: \"Jimbo\" },\n  ];\n  const DEMO_COLS = [\n    { field: \"id\", title: \"Id\" },\n    { field: \"title\", title: \"Title\" },\n  ];\n  return (\n    <div>\n    {fetcher.type !== \"done\" ? <span>Loading...</span> :\n        <MaterialTable\n          columns={DEMO_COLS}\n          detailPanel={\n            ({ rowData }) => {\n              console.log(rowData);\n              return (\n                <div\n                  style={{\n                    fontSize: 16,\n                    padding: 5,\n                    margin: 5,\n                  }}\n                >\n                  <Box sx={{ margin: 1 }}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                      {rowData.title}\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"details\">\n                      <TableBody>\n                        <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              Full Text\n                            </TableCell>\n                            <TableCell colSpan={3}>{rowData.fullText}</TableCell>\n                          </TableRow>\n                          <TableRow key='dates'>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Written\n                            </TableCell>\n                            <TableCell>\n                              1/1/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Published\n                            </TableCell>\n                            <TableCell>\n                              1/2/1850\n                            </TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </Box>\n                </div>\n              );\n            }\n          }\n          data={fetcher.data.result}\n          /*\n          components={{\n            Toolbar: (props: any) => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: '0px 10px' }}>\n                  <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                </div>\n              </div>\n            ),\n          }}\n          */\n        />\n    }\n    </div>\n  );\n}", "import * as React from 'react';\nimport {\n  Form, Link, NavLink, Outlet,\n  useLoaderData, useLocation \n} from \"@remix-run/react\";\nimport Box from '@mui/material/Box';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from \"@mui/material/Typography\";\nimport Button from '@mui/material/Button';\nimport ArrowBack from '@mui/icons-material/ArrowBack';\n\n\nfunction EventDetailsPage() {\n  //const backSection = getBackSection(ent_id);\n  return (\n    <div>\n      <div>\n        <NavLink to={`../chron/`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to Chronicle\n          </Button>\n        </NavLink>\n      </div>\n      <div>\n        <Outlet />\n      </div>\n      <div>\n        <NavLink to={`../chron/`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to Chronicle\n          </Button>\n        </NavLink>\n      </div>\n    </div>\n  )\n}\n\nfunction CurrentRoute() {\n  const location = useLocation();\n\n  return (\n    <Typography variant=\"body2\" sx={{ pb: 2 }} color=\"text.secondary\">\n      Current route: {location.pathname}\n    </Typography>\n  );\n}\n\nexport default function ChronPage() {\n  let location = useLocation();\n  let pathname = location.pathname;\n  if (pathname.endsWith(\"/\")) {\n    pathname = pathname.substring(0, pathname.length - 1);\n  }\n  // And now check if it's a detail or main page\n  /*\n  if (!pathname.endsWith(\"chron\")) {\n    return EventDetailsPage();\n  }\n  */\n  /*\n  const [activeTab, setActiveTab] = React.useState(0);\n  React.useEffect(() => {\n    setActiveTab(1);\n  }, []);\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  */\n  return (\n    <Outlet />\n  );\n}", "import * as React from 'react';\r\nimport type { LoaderArgs } from \"@remix-run/node\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\nimport { json } from \"@remix-run/node\";\r\n\r\nimport ArrowBack from '@mui/icons-material/ArrowBack';\r\nimport ArrowForward from '@mui/icons-material/ArrowForward';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EventDetailsPanel } from '~/components/eventDetails'\r\nimport { getEvent } from '~/models/event.server';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Radio from '@mui/material/Radio';\r\n\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n    invariant(params.chronCode, \"Expected params.chronCode\");\r\n    let chronCode = params.chronCode;\r\n    console.log(\"[$chronCode.tsx] chronCode: \" + chronCode);\r\n    if (chronCode === \"\") {\r\n        // Default to list view\r\n        return { type: 'chron', viewName: \"list\" };\r\n    } else if (viewCodes.indexOf(chronCode) > -1) {\r\n        // Specific view\r\n        return { type: 'chron', viewName: chronCode };\r\n    } else {\r\n        // Assume it's an entry id, and fetch the data for it\r\n        let entryData = await getEvent(chronCode);\r\n        // And compute a monthday field\r\n        entryData.monthday = entryData.month_start + \" \" + entryData.day_start;\r\n        return { type: 'details', chronCode: chronCode, entryData: entryData };\r\n    }\r\n}\r\n\r\nconst openInNewTab = (url: string) => {\r\n    window.open(url, '_blank', 'noopener,noreferrer');\r\n};\r\n\r\nconst viewCodes = ['list', 'cal'];\r\n\r\nfunction EventDetailsPage(entryData: any) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <NavLink to={`../../chron/list`}>\r\n                    <Button startIcon={<ArrowBack />}>\r\n                        Back to Chronicle\r\n                    </Button>\r\n                </NavLink>\r\n            </div>\r\n            <Paper>\r\n                <EventDetailsPanel data={entryData} />\r\n            </Paper>\r\n            <div>\r\n                <div className=\"float-left\">\r\n                <NavLink to={`../../chron/list`}>\r\n                    <Button startIcon={<KeyboardArrowLeft />}>\r\n                        Previous Record\r\n                    </Button>\r\n                </NavLink>\r\n                </div>\r\n                <div className=\"float-right\">\r\n                    <NavLink to={`../../chron/list`}>\r\n                        <Button endIcon={<KeyboardArrowRight />}>\r\n                            Next Record\r\n                        </Button>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ChronTable() {\r\n    const reqData = useLoaderData();\r\n    console.log(\"[ChronTable()] reqData: \" + Object.keys(reqData));\r\n    console.log(\"[ChronTable()] type: \" + reqData.type);\r\n    console.log(\"[ChronTable()] viewType: \" + reqData.viewName);\r\n    if (reqData.type === \"details\") {\r\n        return EventDetailsPage(reqData.entryData);\r\n    }\r\n    // (Otherwise reqData.type === \"chron\")\r\n    const data_cols = [\r\n        { field: \"entry_id_clean\", title: \"ID\", width: \"60px\" },\r\n        { field: \"year\", title: \"Year\", width: \"60px\" },\r\n        { field: \"header\", title: \"Heading\", cellStyle: { width: '120px', maxWidth: '140px' }, headerStyle: { width: '120px', maxWidth: '140px' } },\r\n        { field: \"text\", title: \"Text\", cellStyle: { width: '65%' }, headerStyle: { width: '65%' } },\r\n        { field: \"monthday\", title: \"Date\", width: \"60px\" }\r\n    ];\r\n    const fetcher = useFetcher();\r\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\r\n    React.useEffect(() => {\r\n        if (fetcher.type === \"init\") {\r\n            fetcher.load(`/fetch/chron/10/0`);\r\n        }\r\n    }, [fetcher]);\r\n    /*\r\n    const handleChangePage = (\r\n        event: React.MouseEvent<HTMLButtonElement> | null,\r\n        newPage: number,\r\n    ) => {\r\n        setPage(newPage);\r\n    };\r\n    */\r\n\r\n    /*\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    */\r\n    // MaterialTable documentation:\r\n    // Orig: https://material-table.com/#/\r\n    // Core: https://material-table-core.com/\r\n    // For options:\r\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <MaterialTable\r\n                title={\r\n                    <div>\r\n                        <RadioGroup row={true} value={reqData.viewName}>\r\n                            <NavLink to=\"../list\"><FormControlLabel control={<Radio />} label=\"List View\" value=\"list\" /></NavLink>\r\n                            <NavLink to=\"../cal\"><FormControlLabel control={<Radio />} label=\"Calendar View\" value=\"cal\" /></NavLink>\r\n                        </RadioGroup>\r\n                    </div>\r\n                }\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    padding: 'dense',\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10],\r\n                    columnsButton: true,\r\n                    //showTitle: false,\r\n                    exportAllData: true,\r\n                    initialPage: 0,\r\n                    draggable: false,\r\n                    toolbar: true,\r\n                    //sorting: false,\r\n                    paginationType: 'stepped',\r\n                    numberOfPagesAround: 4\r\n                }}\r\n                columns={data_cols}\r\n                detailPanel={\r\n                    ({ rowData }: any) => <EventDetailsPanel data={rowData} />\r\n                }\r\n                data={(query) =>\r\n                    new Promise((resolve, reject) => {\r\n                        console.log(\"[$chronCode.tsx] query:\");\r\n                        console.log(query);\r\n                        console.log(\"query.search: \" + query.search);\r\n                        if (query.search === \"\") {\r\n                            fetch(`/fetch/chron/10/${query.page}`)\r\n                                .then(response => response.json())\r\n                                .then(rsJson => {\r\n                                    resolve({\r\n                                        data: rsJson.docs,\r\n                                        page: query.page,\r\n                                        totalCount: rsJson.total,\r\n                                    })\r\n                                });\r\n                        } else {\r\n                            console.log(\"Querying\");\r\n                            // Search query\r\n                            fetch(`/fetch/chron/search/${query.search}`)\r\n                                .then(response => response.json())\r\n                                .then(rsJson => {\r\n                                    resolve({\r\n                                        data: rsJson.docs,\r\n                                        page: query.page,\r\n                                        totalCount: rsJson.total,\r\n                                    })\r\n                                });\r\n                        }\r\n                    })\r\n                }\r\n                components={{\r\n                    Cell: (props) => (\r\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[350px]\" {...props} />\r\n                    ),\r\n                    Container: (props) => (\r\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\r\n                    ),\r\n                    Toolbar: (props) => (\r\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-red-700/10\">\r\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\r\n                        </Box>\r\n                    ),\r\n                    Body: (props) => (\r\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\r\n                    ),\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => (\r\n                            <InfoIcon />\r\n                        ),\r\n                        tooltip: \"View Full Info\",\r\n                        onClick: (event, rowData) => {\r\n                            //const rowJson = JSON.stringify(rowData, null, 2);\r\n                            //alert(`Do save operation : ${rowJson}`);\r\n                            openInNewTab(`./${rowData.entry_id_clean}`)\r\n                        },\r\n                    },\r\n                ]}\r\n                localization={{\r\n                    pagination: {\r\n                        labelDisplayedRows: '{from}-{to} of {count}'\r\n                    },\r\n                    toolbar: {\r\n                        nRowsSelected: '{0} row(s) selected'\r\n                    },\r\n                    header: {\r\n                        actions: ''\r\n                    },\r\n                    body: {\r\n                        emptyDataSourceMessage: 'No records to display',\r\n                        filterRow: {\r\n                            filterTooltip: 'Filter'\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </TableContainer>\r\n    );\r\n}", "import * as React from 'react';\r\n\r\nimport ArrowBack from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Chip from '@mui/material/Chip';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { NavLink } from '@remix-run/react';\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ContentCopy from '@mui/icons-material/ContentCopy';\r\n\r\n/*\r\nlet regCodeDict: { [key: string]: string } = {\r\n    \"marx\": \"Marx\",\r\n    \"engels\": \"Engels\",\r\n    \"me\": \"Marx-Engels Joint Works\",\r\n    \"st\": \"Sources/Translations\",\r\n}\r\nfunction regCodeToAuth(authName: string) {\r\n    return titleDict[authName];\r\n}\r\n*/\r\n\r\n/*\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../chron/\" + chronRefId;\r\n    return (\r\n        <Fab variant=\"extended\" sx={{ boxShadow: 0, border: 1 }} className=\"m-2 p-2 cursor-pointer\" size=\"small\" onClick={() => window.open(relUrl, '_blank', 'noopener,noreferrer')}>\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </Fab>\r\n    );\r\n}\r\n*/\r\n\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../../chron/\" + chronRefId;\r\n    return (\r\n        <NavLink to={relUrl} rel=\"noopener,noreferrer\" target=\"_blank\" className=\"m-2 p-2 border border-solid border-black cursor-pointer rounded-full\">\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nfunction getChronRefLinks(chronRefIds: string[]) {\r\n    let y = chronRefIds.map((item: string) => { return getChronRefLink(item)})\r\n    return y.join(\", \")\r\n}\r\n\r\nexport function EventDetailsPanel(props: any) {\r\n    let rowData = props.data;\r\n    //console.log(rowData);\r\n    const [tooltipText, setTooltipText] = React.useState(\"Copy Link\");\r\n    const handleTooltipClose = () => {\r\n        setTooltipText(\"Copy Link\");\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                fontSize: 16,\r\n                padding: 5,\r\n                margin: 5,\r\n            }}\r\n        >\r\n            <Box sx={{ margin: 1 }}>\r\n                <div className=\"grid grid-cols-2 mb-2 items-center\">\r\n                    <Typography variant=\"h5\" className=\"table-cell align-middle font-bold\">\r\n                        {rowData.ymd}\r\n                    </Typography>\r\n                    {rowData.start_approx === \"checked\" &&\r\n                        <Tooltip title=\"Start date is approximate\">\r\n                            <Chip\r\n                                icon={<InfoIcon />}\r\n                                label=\"Approximate\"\r\n                                className=\"m-2 cursor-pointer\"\r\n                            />\r\n                        </Tooltip>\r\n                    }\r\n                    <div className=\"self-center float-right\">\r\n                        <FormControl sx={{ m: 1, width: '36ch' }} variant=\"outlined\" className=\"float-right\">\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Permalink</InputLabel>\r\n                            <OutlinedInput\r\n                                id=\"outlined-adornment-password\"\r\n                                className=\"float-right\"\r\n                                value={`https://marxdb.com/chron/${rowData.entry_id_clean}`}\r\n                                disabled\r\n                                type={'text'}\r\n                                size={'small'}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <Tooltip title={tooltipText}>\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            edge=\"end\"\r\n                                            onClick={() => {\r\n                                                //alert('clicked');\r\n                                                navigator.clipboard.writeText(`https://marxdb.com/chron/${rowData.entry_id_clean}`).then(\r\n                                                    function () {\r\n                                                        /* clipboard successfully set */\r\n                                                        console.log('Success! The text was copied to your clipboard');\r\n                                                        setTooltipText(\"Link Copied!\");\r\n                                                    },\r\n                                                    function () {\r\n                                                        /* clipboard write failed */\r\n                                                        console.log('Oops! Your browser does not support the Clipboard API');\r\n                                                    }\r\n                                                )\r\n                                            }}\r\n                                        >\r\n                                            {<ContentCopy />}\r\n                                        </IconButton>\r\n                                        </Tooltip>\r\n                                    </InputAdornment>\r\n                                }\r\n                                label=\"Permalink\"\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                </div>\r\n                <Table size=\"small\" aria-label=\"details\">\r\n                    <TableBody>\r\n                        <TableRow key='header' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Heading\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-bold\">{rowData.header}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='desc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Description\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-mono\">{rowData.text}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='dates'>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Written\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {rowData.written}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Dated\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"dated\") > - 1 ? rowData.dated : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Published\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"published\") > - 1 ? rowData.published : \"NA\"}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {(Object.keys(rowData).indexOf(\"lang_orig\") > -1) &&\r\n                            <TableRow key='langs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Language(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.lang_orig.join(\", \")}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"source\") > -1) &&\r\n                            <TableRow key='sources' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Source(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.source}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"reprint\") > -1) &&\r\n                            <TableRow key='reprints' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Reprints\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.reprint}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"more_info\") > -1) &&\r\n                            <TableRow key='misc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Misc\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.more_info}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"chron_ref_ids\") > -1) &&\r\n                            <TableRow key='chronrefs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Chronicle References\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.chron_ref_ids.map((item: string) => getChronRefLink(item))}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Box>\r\n        </div>\r\n    );\r\n}", "import FullCalendar from '@fullcalendar/react' // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\r\n\r\nexport default function ChronCal() {\r\n    return (\r\n        <FullCalendar\r\n            plugins={[dayGridPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n        />\r\n    )\r\n}", "export default function CycloPage() {\n    return (\n        <div className=\"container\">\n            <div>\n                <p className=\"font-bold\">Welcome to the Marx-Engels Digital Cyclopedia!</p>\n            </div>\n            <div>\n                <p>Choose a database in the menu on the left to get started.</p>\n            </div>\n        </div>\n    );\n}", "import * as React from 'react';\nimport { useTheme, withStyles } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport Collapse from '@mui/material/Collapse';\n\nimport Chip from '@mui/material/Chip';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport MaterialTable from \"@material-table/core\";\nimport MTableToolbar from '@material-table/core';\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { getDocinfoListItems } from \"~/models/docinfo.server\";\n\nconst defaultPerPage = 3;\nconst defaultPageNum = 0;\n\nexport async function loader({ request }: LoaderArgs) {\n  const docinfoListItems = await getDocinfoListItems();\n  return json({ docinfoListItems });\n}\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number,\n  ) => void;\n}\n\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction createData(\n  id: string,\n  title: string\n) {\n  return {\n    id,\n    title,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nfunction Row(props: { data: ReturnType<typeof createData> }) {\n  const { data } = props;\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\" sx={{ maxWidth: 100, overflowX: 'clip' }}>\n          {data.id}\n        </TableCell>\n        <TableCell>\n          {data.title}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Text Info\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst EnhancedTableToolbar = () => {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h5\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Marx-Engels Digital Register\n      </Typography>\n    </Toolbar>\n  );\n};\n\nexport default function CollapsibleTable() {\n  const initData = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n  // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n\n  React.useEffect(() => {\n    if (fetcher.type === \"init\") {\n      fetcher.load(`/fetch/gloss/${defaultPerPage}/${defaultPageNum}`);\n    }\n  }, [fetcher]);\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rowsOnPage, setRowsOnPage] = React.useState(5);\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsOnPage) : 0;\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const DEMO_DATA = [\n    { id: 1, name: \"Mary\" },\n    { id: 2, name: \"Joe\" },\n    { id: 3, name: \"Jim\" },\n    { id: 4, name: \"Bob\" },\n    { id: 5, name: \"Bernie\" },\n    { id: 6, name: \"Jimbo\" },\n  ];\n  const DEMO_COLS = [\n    { field: \"id\", title: \"Id\" },\n    { field: \"title\", title: \"Title\" },\n  ];\n  return (\n    <div>\n    {fetcher.type !== \"done\" ? <span>Loading...</span> :\n        <MaterialTable\n          columns={DEMO_COLS}\n          detailPanel={\n            ({ rowData }) => {\n              console.log(rowData);\n              return (\n                <div\n                  style={{\n                    fontSize: 16,\n                    padding: 5,\n                    margin: 5,\n                  }}\n                >\n                  <Box sx={{ margin: 1 }}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                      {rowData.title}\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"details\">\n                      <TableBody>\n                        <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              Full Text\n                            </TableCell>\n                            <TableCell colSpan={3}>{rowData.fullText}</TableCell>\n                          </TableRow>\n                          <TableRow key='dates'>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Written\n                            </TableCell>\n                            <TableCell>\n                              1/1/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Published\n                            </TableCell>\n                            <TableCell>\n                              1/2/1850\n                            </TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </Box>\n                </div>\n              );\n            }\n          }\n          data={fetcher.data.result}\n          /*\n          components={{\n            Toolbar: (props: any) => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: '0px 10px' }}>\n                  <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                </div>\n              </div>\n            ),\n          }}\n          */\n        />\n    }\n    </div>\n  );\n}", "import * as React from 'react';\nconst axios = require(\"axios\");\n\nimport Box from '@mui/material/Box';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport MaterialTable, { MTableToolbar, MTableBody, MTableHeader, MTablePagination } from \"@material-table/core\";\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { Form, Link, useLoaderData, useFetcher, useSubmit } from \"@remix-run/react\";\nimport { IconButton, TableContainer, useTheme } from '@mui/material';\n\nfunction MTableSandbox() {\n    //let movies = useLoaderData();\n    let fetcher = useFetcher();\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n    React.useEffect(() => {\n        if (fetcher.type === \"init\") {\n            fetcher.load(`/fetch/sand/10/0`);\n        }\n    }, [fetcher]);\n\n    return (\n        fetcher.type !== \"done\" ? <div>Loading...</div> :\n        <div>\n            <h1>Movies</h1>\n            <Form method=\"get\">\n                <p>\n                    Showing {fetcher.data.totalShown} of {fetcher.data.totalCount} docs\n                </p>\n            </Form>\n            <ul>\n                {fetcher.data.docs.map((doc) => (\n                    <li key={doc.title}>\n                        <Link to={doc.title}>{doc.title}</Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\n\nexport default function SandboxTable() {\n    const data_cols = [\n        { field: \"ent_id\", title: \"ID\", width: \"100px\" },\n        { field: \"title\", title: \"Title\" },\n        { field: \"year_combined\", title: \"Year\", width: \"100px\" },\n    ];\n    const fetcher = useFetcher();\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n    React.useEffect(() => {\n        if (fetcher.type === \"init\") {\n            fetcher.load(`/fetch/sand/10/0`);\n        }\n    }, [fetcher]);\n    /*\n    const handleChangePage = (\n        event: React.MouseEvent<HTMLButtonElement> | null,\n        newPage: number,\n    ) => {\n        setPage(newPage);\n    };\n    */\n\n    /*\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    */\n    // MaterialTable documentation:\n    // Orig: https://material-table.com/#/\n    // Core: https://material-table-core.com/\n    return (\n        <TableContainer component={Paper}>\n            <MaterialTable\n                title={\"Sandbox Table\"}\n                options={{\n                    padding: 'dense', pageSize: 10, pageSizeOptions: [10],\n                    //showTitle: false,\n                    exportAllData: true,\n                    initialPage: 0\n                }}\n                columns={data_cols}\n                detailPanel={\n                    ({ rowData }: any) => {\n                        console.log(rowData);\n                        return (\n                            <div\n                                style={{\n                                    fontSize: 16,\n                                    padding: 5,\n                                    margin: 5,\n                                }}\n                            >\n                                <Box sx={{ margin: 1 }}>\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                        {rowData.title}\n                                    </Typography>\n                                    <Table size=\"small\" aria-label=\"details\">\n                                        <TableBody>\n                                            <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                                                <TableCell\n                                                    component=\"th\"\n                                                    scope=\"row\"\n                                                    sx={{ fontWeight: 'bold' }}\n                                                >\n                                                    Full Text\n                                                </TableCell>\n                                                <TableCell colSpan={5} className=\"font-mono\">{rowData.full_text}</TableCell>\n                                            </TableRow>\n                                            <TableRow key='dates'>\n                                                <TableCell sx={{ fontWeight: 'bold' }}>\n                                                    Written\n                                                </TableCell>\n                                                <TableCell>\n                                                    1/1/1850\n                                                </TableCell>\n                                                <TableCell sx={{ fontWeight: 'bold' }}>\n                                                    Dated\n                                                </TableCell>\n                                                <TableCell>\n                                                    1/3/1850\n                                                </TableCell>\n                                                <TableCell sx={{ fontWeight: 'bold' }}>\n                                                    Published\n                                                </TableCell>\n                                                <TableCell>\n                                                    1/2/1850\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                </Box>\n                            </div>\n                        );\n                    }\n                }\n                data={(query) =>\n                    new Promise((resolve, reject) => {\n                        fetch(`/fetch/sand/10/${query.page}`)\n                            .then(response => response.json())\n                            .then(rsJson => {\n                                resolve({\n                                    data: rsJson.docs,\n                                    page: query.page,\n                                    totalCount: rsJson.total,\n                                })\n                            })\n                    })\n                }\n                components={{\n                    Container: (props) => (\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%' }} elevation={1} {...props} />\n                    ),\n\n                    Toolbar: (props) => (\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-green-700/10\">\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\n                        </Box>\n                    ),\n                    Body: (props) => (\n                        <MTableBody className=\"\" {...props} />\n                    ),\n\n                }}\n            />\n        </TableContainer>\n    );\n}\n\n// <li key={row.name}>{row}</li>\n\n// {\n//     data.docinfoListItems.map((row: any, index: any) => (\n//         <li>{row.ent_id}</li>\n//     ))\n// }\n\n/*\n\n// Old Pagination:\nPagination: (props) => (\n        <Box className=\"flex justify-end bg-green-700/20\" sx={{ borderTop: '1px solid rgba(184,184,184,1)' }}>\n            <MTablePagination colspan={3} className=\"flex justify-end\" {...props} />\n        </Box>\n    )\n*/\n\n// Old table container:\n/*\n<div className=\"flex grow h-full max-h-full flex-col min-h-0\">\n*/\n\n// Toolbar example\n/*\n                    components={{\n                      Toolbar: (props: any) => (\n                        <div>\n                          <MTableToolbar {...props} />\n                          <div style={{ padding: '0px 10px' }}>\n                            <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                          </div>\n                        </div>\n                      ),\n                    }}\n                    */\n\n// Custom pagination attempt\n/*\nPagination: (props) => (\n    <Box className=\"flex justify-end bg-green-700/10\" sx={{ borderTop: '1px solid rgba(184,184,184,1)' }}>\n        <TableRow>\n            <MTablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={3}\n                totalCount={1000}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n                className=\"flex justify-end\"\n                {...props}\n            />\n        </TableRow>\n    </Box>\n),\n*/\n// use with: data = { fetcher.data.result }", "import * as React from 'react';\nimport { Form, Link, NavLink, Outlet, useLocation } from \"@remix-run/react\";\n\nimport ArrowBack from '@mui/icons-material/ArrowBack';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableRow from '@mui/material/TableRow';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableHeader, MTablePagination } from \"@material-table/core\";\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n  \nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 1 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nlet tabVals: { [key: string]: number } = {\n  \"marx\": 0,\n  \"engels\": 1,\n  \"me\": 2,\n  \"st\": 3,\n}\nfunction getTabVal(authName: string) {\n  return tabVals[authName];\n}\n\nfunction getBackSection(ent_id: string) {\n  if (ent_id.startsWith(\"ME\")) {\n    return {regCode: \"me\", regName: \"Marx-Engels\"};\n  } else if (ent_id.startsWith(\"M\")) {\n    return {regCode: \"marx\", regName: \"Marx\"};\n  } else if (ent_id.startsWith(\"E\")) {\n    return {regCode: \"engels\", regName: \"Engels\"};\n  } else {\n    return {regCode: \"st\", regName: \"Sources/Translations\"};\n  }\n}\n\nfunction EntryDetails(ent_id: string) {\n  const backSection = getBackSection(ent_id);\n  return (\n    <div>\n      <div>\n        <NavLink to={`../reg/${backSection.regCode}`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to {backSection.regName} Register\n          </Button>\n        </NavLink>\n      </div>\n      <div>\n        <Outlet />\n      </div>\n      <div>\n        <NavLink to={`../reg/`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to Register\n          </Button>\n        </NavLink>\n      </div>\n    </div>\n  )\n}\n\nconst authNames = ['marx','engels','me','st'];\n\nexport default function RegPage() {\n  const location = useLocation();\n  //console.log(location)\n  let pathnameClean = location.pathname;\n  if (pathnameClean.endsWith(\"/\")) {\n    // Remove trailing slash\n    pathnameClean = pathnameClean.slice(0,-1);\n  }\n  const pathElts = pathnameClean.split(\"/\");\n  const regCode = pathElts[pathElts.length-1];\n  console.log(\"[reg.tsx] regCode: \" + regCode);\n  // If it's an author, we can set the active tab\n  let activeTab = 0;\n  if (regCode === \"reg\") {\n    // Default to Marx\n    activeTab = getTabVal('marx');\n  } else if (authNames.indexOf(regCode) > -1) {\n    activeTab = getTabVal(regCode);\n  } else {\n    // Assume it's an entry id and return the details\n    return EntryDetails(regCode);\n  }\n  \n  /*\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  */\n  return (\n    <Outlet />\n  );\n}\n\n\n// Old Tabs obj\n/*\n<Tabs\n            value={activeTab}\n            onChange={handleChange}\n            aria-label=\"basic tabs example\"\n        >\n*/", "import * as React from 'react';\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { useLoaderData, useParams, useFetcher, NavLink, useTransition, useLocation } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport LinkIcon from '@mui/icons-material/Link';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Paper from '@mui/material/Paper';\nimport TableContainer from '@mui/material/TableContainer';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\n\nimport { EntryDetailsPanel } from '~/components/entryDetails'\nimport { getFulltext } from '~/models/docinfo.server';\nimport { RowData } from '@tanstack/react-table';\nimport Tooltip from '@mui/material/Tooltip';\nimport Chip from '@mui/material/Chip';\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    console.log(\"[$regCode.fulltext] params.regCode: \" + params.regCode);\n    // Fetch from DB\n    let fulltextData = await getFulltext(params.regCode);\n    return fulltextData;\n}\n\nconst openInNewTab = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n};\n\nconst authCodes = ['marx','engels','me','st'];\n\nfunction toHtml(origText: string) {\n    return origText.replaceAll(\"\\n\", \"<br>\");\n}\n\nfunction EntryDetailsPage(entryData: any) {\n   return (\n    <Paper>\n        <EntryDetailsPanel data={entryData} />\n    </Paper>\n   );\n}\n\nfunction FulltextPanel(props: any) {\n    let reqData = props.data;\n    //console.log(rowData);\n    const [tooltipText, setTooltipText] = React.useState(\"Download Fulltext\");\n    const handleTooltipClose = () => {\n        setTooltipText(\"Download Fulltext\");\n    }\n    return (\n        <div\n            style={{\n                fontSize: 16,\n                padding: 5,\n                margin: 5,\n            }}\n        >\n            <Box sx={{ margin: 1 }}>\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                    {reqData.entry_id}: {reqData.title}\n                    {(Object.keys(reqData).indexOf(\"fulltext\") > -1) &&\n                    <Tooltip title={tooltipText}>\n                        <Chip\n                            component=\"a\"\n                            href={`https://drive.google.com/uc?export=download&id=${reqData.drive_id}`}\n                            clickable\n                            icon={<DownloadIcon />}\n                            label={reqData.fulltext_filename}\n                            variant=\"outlined\"\n                            className=\"float-right cursor-pointer\"\n                        />\n                    </Tooltip>\n                    }\n                </Typography>\n\n                <Paper\n                    className=\"break-words p-3 overflow-y-scroll\"\n                    sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }}\n                >\n                    <Typography className=\"h-full max-h-full w-full\">\n                        {(Object.keys(reqData).indexOf(\"fulltext\") > -1) ?\n                        <div className=\"font-mono\" dangerouslySetInnerHTML={{ __html: toHtml(reqData.fulltext) }}></div> : <div className=\"font-mono\">[Fulltext not available]</div>\n                        }\n                    </Typography>\n                </Paper>\n            </Box>\n        </div>\n    );\n}\n\nexport default function FulltextPage() {\n    const reqData = useLoaderData();\n    // Otherwise, reqData.type === \"auth\", and we can get the auth name\n    const authName = reqData.authName;\n    const location = useLocation();\n    const data_cols = [\n        { field: \"ent_id\", title: \"ID\", width: \"60px\" },\n        { field: \"title\", title: \"Title\", cellStyle: {width: '80%'}, headerStyle: {width: '80%'} },\n        { field: \"year_combined\", title: \"Year\", width: \"60px\" },\n    ];\n    return (\n        <FulltextPanel data={reqData} />\n    );\n}\n\n/*\n\nOld Chip onClick:\n\nonClick={() => {\n                                console.log(\"Fulltext download\");\n                                const blob = new Blob([reqData.fulltext], { type: 'text/plain' });\n                                console.log(blob);\n                                const url = URL.createObjectURL(blob);\n                                var link = document.createElement(\"a\");\n                                link.setAttribute(\"href\", url);\n                                link.setAttribute(\"download\", reqData.fulltext_filename);\n                                link.style.visibility = 'hidden';\n                                document.body.appendChild(link); // Required for FF\n                                link.click(); // This will download the data file named \"my_data.csv\".\n                                document.body.removeChild(link);\n                            }}\n\n*/", "import * as React from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Chip from '@mui/material/Chip';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { NavLink } from '@remix-run/react';\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\n\r\n/*\r\nlet regCodeDict: { [key: string]: string } = {\r\n    \"marx\": \"Marx\",\r\n    \"engels\": \"Engels\",\r\n    \"me\": \"Marx-Engels Joint Works\",\r\n    \"st\": \"Sources/Translations\",\r\n}\r\nfunction regCodeToAuth(authName: string) {\r\n    return titleDict[authName];\r\n}\r\n*/\r\n\r\n/*\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../chron/\" + chronRefId;\r\n    return (\r\n        <Fab variant=\"extended\" sx={{ boxShadow: 0, border: 1 }} className=\"m-2 p-2 cursor-pointer\" size=\"small\" onClick={() => window.open(relUrl, '_blank', 'noopener,noreferrer')}>\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </Fab>\r\n    );\r\n}\r\n*/\r\n\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../../chron/\" + chronRefId;\r\n    return (\r\n        <NavLink to={relUrl} rel=\"noopener,noreferrer\" target=\"_blank\" className=\"m-2 p-2 border border-solid border-black cursor-pointer rounded-full\">\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nexport function EntryDetailsPanel(props: any) {\r\n    let rowData = props.data;\r\n    //console.log(rowData);\r\n    const [tooltipText, setTooltipText] = React.useState(\"Copy Link\");\r\n    const handleTooltipClose = () => {\r\n        setTooltipText(\"Copy Link\");\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                fontSize: 16,\r\n                padding: 5,\r\n                margin: 5,\r\n            }}\r\n        >\r\n            <Box sx={{ margin: 1 }}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    {rowData.title}\r\n                    {rowData.dubious && \r\n                      <Tooltip title=\"Authorship of this text is disputed (see description)\">\r\n                      <Chip\r\n                        icon={<InfoIcon />}\r\n                        label=\"Dubious\"\r\n                        className=\"m-2 cursor-pointer\"\r\n                      />\r\n                      </Tooltip>\r\n                    }\r\n                    <Tooltip title={tooltipText}>\r\n                    <Chip\r\n                      icon={<LinkIcon />}\r\n                      label={rowData.entry_id}\r\n                      variant=\"outlined\"\r\n                      className=\"float-right\"\r\n                      onMouseLeave={handleTooltipClose}\r\n                      onClick={() => {\r\n                        //alert('clicked');\r\n                        navigator.clipboard.writeText(`https://marxdb.com/reg/${rowData.entry_id}`).then(\r\n                            function () {\r\n                                /* clipboard successfully set */\r\n                                console.log('Success! The text was copied to your clipboard');\r\n                                setTooltipText(\"Link Copied!\");\r\n                            },\r\n                            function () {\r\n                                /* clipboard write failed */\r\n                                console.log('Oops! Your browser does not support the Clipboard API');\r\n                            }\r\n                          )\r\n                      }}\r\n                    />\r\n                    </Tooltip>\r\n                </Typography>\r\n                <Table size=\"small\" aria-label=\"details\">\r\n                    <TableBody>\r\n                        <TableRow key='desc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Description\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-mono\">{rowData.full_text}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='dates'>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Written\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"written\") > - 1 ? rowData.written : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Dated\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"dated\") > - 1 ? rowData.dated : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Published\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"published\") > - 1 ? rowData.published : \"NA\"}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {(Object.keys(rowData).indexOf(\"lang_orig\") > -1) &&\r\n                            <TableRow key='langs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Language(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.lang_orig.join(\", \")}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"source\") > -1) &&\r\n                            <TableRow key='sources' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Source(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.source}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"reprint\") > -1) &&\r\n                            <TableRow key='reprints' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Reprints\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.reprint}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"more_info\") > -1) &&\r\n                            <TableRow key='misc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Misc\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.more_info}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"chron_ref_ids\") > -1) &&\r\n                            <TableRow key='chronrefs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Chronicle References\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.chron_ref_ids.map((item: string) => getChronRefLink(item))}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Box>\r\n        </div>\r\n    );\r\n}", "import * as React from 'react';\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { useLoaderData, useParams, useFetcher, NavLink, useTransition, useLocation } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Paper from '@mui/material/Paper';\nimport TableContainer from '@mui/material/TableContainer';\nimport InfoIcon from '@mui/icons-material/Info';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\n\nimport { EntryDetailsPanel } from '~/components/entryDetails'\nimport { getDocinfo } from '~/models/docinfo.server';\nimport { RowData } from '@tanstack/react-table';\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    let regCode = params.regCode;\n    if (regCode === \"\") {\n        // Default to Marx\n        return {type: 'auth', authName: \"marx\"};\n    } else if (authCodes.indexOf(regCode) > -1) {\n        // Author\n        return {type: 'auth', authName: regCode};\n    } else {\n        // Assume it's an entry id, and fetch the data for it\n        let entryData = await getDocinfo(regCode);\n        return {type: 'details', regCode: regCode, entryData: entryData};\n    }\n}\n\nconst openInNewTab = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n};\n\nconst authCodes = ['marx','engels','me','st'];\n\nfunction EntryDetailsPage(entryData: any) {\n   return (\n    <Paper>\n        <EntryDetailsPanel data={entryData} />\n    </Paper>\n   );\n}\n\nexport default function RegTable() {\n    const reqData = useLoaderData();\n    if (reqData.type === \"details\") {\n        return EntryDetailsPage(reqData.entryData);\n    }\n    // Otherwise, reqData.type === \"auth\", and we can get the auth name\n    const authName = reqData.authName;\n    const [lastAuth, setLastAuth] = React.useState(authName);\n    const location = useLocation();\n    console.log(\"[$regCode] location.pathname: \" + location.pathname);\n    const tableRef = React.createRef<any>();\n    React.useEffect(() => {\n        tableRef.current && tableRef.current.onQueryChange();\n        tableRef.current && tableRef.current.onPageChange({}, 0);\n        console.log(\"[useEffect()] location.pathname: \" + location.pathname)\n    }, [location.pathname]);\n   /*\n   React.useEffect(() => {\n    if (!pageReset) {\n        console.log(\"effect\");\n        console.log(tableRef.current);\n        tableRef.current.onPageChange({}, 0);\n        setPageReset(true);\n    }\n   }, []);\n   */\n    const data_cols = [\n        { field: \"entry_id\", title: \"ID\", width: \"60px\" },\n        { field: \"title\", title: \"Title\", cellStyle: {width: '60%'}, headerStyle: {width: '60%'} },\n        { field: \"day_combined\", title: \"Day\", cellStyle: {textAlign: 'right'}, headerStyle: {textAlign: 'right', width: \"50px\"}, width: \"50px\", maxWidth: \"50px\"},\n        { field: \"month_combined\", title: \"Month\", width: \"50px\", maxWidth: \"50px\", cellStyle: {textAlign: 'center'}, headerStyle: {textAlign: 'center'}},\n        { field: \"year_final\", title: \"Year\", width: \"70px\", maxWidth: \"70px\", minWidth: \"70px\", headerStyle: {textAlign: 'center'}, cellStyle: {textAlign: 'center'} },\n    ];\n    // MaterialTable documentation:\n    // Orig: https://material-table.com/#/\n    // Core: https://material-table-core.com/\n    // For options:\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\n    return (\n        <TableContainer component={Paper}>\n            <MaterialTable\n                title={\n                    <div className=\"font-bold\">\n                        <RadioGroup row={true} value={authName}>\n                            <NavLink to=\"../marx\"><FormControlLabel control={<Radio />} label=\"Marx\" value=\"marx\" /></NavLink>\n                            <NavLink to=\"../engels\"><FormControlLabel control={<Radio />} label=\"Engels\" value=\"engels\" /></NavLink>\n                            <NavLink to=\"../me\"><FormControlLabel control={<Radio />} label=\"Marx-Engels\" value=\"me\" /></NavLink>\n                            <NavLink to=\"../st\"><FormControlLabel control={<Radio />} label=\"Sources/Translations\" value=\"st\" /></NavLink>\n                    </RadioGroup>\n                    </div>\n                }\n                options={{\n                    actionsColumnIndex: -1,\n                    padding: 'dense',\n                    pageSize: 10,\n                    pageSizeOptions: [10],\n                    columnsButton: true,\n                    //showTitle: false,\n                    exportAllData: true,\n                    initialPage: 0,\n                    draggable: false,\n                    toolbar: true,\n                    sorting: false,\n                    paginationType: 'stepped',\n                    numberOfPagesAround: 4\n                }}\n                tableRef={tableRef}\n                columns={data_cols}\n                detailPanel={\n                    ({ rowData }: any) => <EntryDetailsPanel data={rowData} />\n                }\n                data={(query) =>\n                    new Promise((resolve, reject) => {\n                        console.log(\"Fetching: \" + authName);\n                        let queryPage = query.page;\n                        if (authName !== lastAuth) {\n                            console.log(\"Changing authors\");\n                            queryPage = 0;\n                            setLastAuth(authName);\n                        }\n                        fetch(`/fetch/reg/${authName}/10/${queryPage}`)\n                            .then(response => response.json())\n                            .then(rsJson => {\n                                resolve({\n                                    data: rsJson.docs,\n                                    page: queryPage,\n                                    totalCount: rsJson.total,\n                                })\n                            })\n                    })\n                }\n                components={{\n                    Cell: (props) => (\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[450px]\" {...props} />\n                    ),\n                    Container: (props) => (\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\n                    ),\n                    Toolbar: (props) => (\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-sky-700/10\">\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\n                        </Box>\n                    ),\n                    Body: (props) => (\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\n                    ),\n                }}\n                actions={[\n                    {\n                        icon: () => (\n                            <InfoIcon />\n                        ),\n                        tooltip: \"View Full Info\",\n                        onClick: (event, rowData) => {\n                            //const rowJson = JSON.stringify(rowData, null, 2);\n                            //alert(`Do save operation : ${rowJson}`);\n                            openInNewTab(`./${rowData.entry_id}`)\n                        },\n                    },\n                    {\n                        icon: () => (\n                            <DescriptionIcon />\n                        ),\n                        tooltip: \"View Full Text\",\n                        onClick: (event, rowData) => {\n                            console.log(\"fulltext\");\n                            openInNewTab(`./${rowData.entry_id}/fulltext`)\n                        }\n                    }\n                ]}\n                localization={{\n                    pagination: {\n                        labelDisplayedRows: '{from}-{to} of {count}'\n                    },\n                    toolbar: {\n                        nRowsSelected: '{0} row(s) selected'\n                    },\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No records to display',\n                        filterRow: {\n                            filterTooltip: 'Filter'\n                        }\n                    }\n                }}\n            />\n        </TableContainer>\n    );\n}", "import * as React from 'react';\nimport { Outlet, useLoaderData, useLocation } from \"@remix-run/react\";\n\nimport type { LoaderArgs } from \"@remix-run/node\";\n\nimport { getDocinfo, getDocinfoCount, getDocinfoPageAirtable, getDocinfoPageTotalAirtable } from \"~/models/docinfo.server\";\nimport Typography from '@mui/material/Typography';\n\nexport async function loader({ request }: LoaderArgs) {\n  //const docinfoListItems = await getDocinfoAirtable(\"M0100\");\n  //const docinfoCount = await getDocinfoCount();\n  //const docinfoPage = await getDocinfoPageAirtable(\"marx\", 10, 0);\n  const docinfoPageCount = await getDocinfoPageTotalAirtable(\"M\");\n  console.log(\"[loader()]\");\n  console.log(docinfoPageCount);\n  return docinfoPageCount;\n}\n\nexport default function RegPage() {\n  const reqData = useLoaderData();\n  //console.log(reqData);\n  return (\n    <div>\n      {reqData}\n    </div>\n  );\n}\n\n/*\n{reqData.documents.map((x: any) => {\n        return <li>{Object.entries(x.fields)}</li>\n      })}\n\n*/", "export default {'version':'f5f77374','entry':{'module':'/build/entry.client-DYZYRRII.js','imports':['/build/_shared/chunk-6DQPAQKB.js','/build/_shared/chunk-T5RNB5I3.js','/build/_shared/chunk-VFZ2QWLC.js','/build/_shared/chunk-4IYZMDEG.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-7HK2QD2G.js','imports':['/build/_shared/chunk-TN3QNU6F.js','/build/_shared/chunk-HASI3UDZ.js','/build/_shared/chunk-BKODUN5L.js','/build/_shared/chunk-CVMSKPMO.js','/build/_shared/chunk-UXJTOQFQ.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/at':{'id':'routes/at','parentId':'root','path':'at','index':undefined,'caseSensitive':undefined,'module':'/build/routes/at-UU6XIRGM.js','imports':['/build/_shared/chunk-DEXX44ZO.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/chron':{'id':'routes/chron','parentId':'root','path':'chron','index':undefined,'caseSensitive':undefined,'module':'/build/routes/chron-KXC5MDR5.js','imports':['/build/_shared/chunk-MR2Y6Q4S.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/chron/$chronCode':{'id':'routes/chron/$chronCode','parentId':'routes/chron','path':':chronCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/chron/$chronCode-VT22UN7O.js','imports':['/build/_shared/chunk-6EQGYKY7.js','/build/_shared/chunk-M4D3OZQE.js','/build/_shared/chunk-TVJDINII.js','/build/_shared/chunk-ZMXBJVIV.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-TN3QNU6F.js','/build/_shared/chunk-HASI3UDZ.js','/build/_shared/chunk-BKODUN5L.js','/build/_shared/chunk-CVMSKPMO.js','/build/_shared/chunk-UXJTOQFQ.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/chron/cal':{'id':'routes/chron/cal','parentId':'routes/chron','path':'cal','index':undefined,'caseSensitive':undefined,'module':'/build/routes/chron/cal-LLHRVBZO.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/chron.$perPage.$pageNum':{'id':'routes/fetch/chron.$perPage.$pageNum','parentId':'root','path':'fetch/chron/:perPage/:pageNum','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/chron.$perPage.$pageNum-LB43J7MU.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/chron.count':{'id':'routes/fetch/chron.count','parentId':'root','path':'fetch/chron/count','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/chron.count-5GT5AXUK.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/chron.search.$query':{'id':'routes/fetch/chron.search.$query','parentId':'root','path':'fetch/chron/search/:query','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/chron.search.$query-2TTIM5M2.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/gloss.$perPage.$pageNum':{'id':'routes/fetch/gloss.$perPage.$pageNum','parentId':'root','path':'fetch/gloss/:perPage/:pageNum','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/gloss.$perPage.$pageNum-4ZSUHGZX.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/gloss.count':{'id':'routes/fetch/gloss.count','parentId':'root','path':'fetch/gloss/count','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/gloss.count-FTS4XNTA.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/reg.$authName.$perPage.$pageNum':{'id':'routes/fetch/reg.$authName.$perPage.$pageNum','parentId':'root','path':'fetch/reg/:authName/:perPage/:pageNum','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/reg.$authName.$perPage.$pageNum-YB3D2CEJ.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/reg.count':{'id':'routes/fetch/reg.count','parentId':'root','path':'fetch/reg/count','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/reg.count-77Y4HFUH.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/reg.details.$regCode':{'id':'routes/fetch/reg.details.$regCode','parentId':'root','path':'fetch/reg/details/:regCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/reg.details.$regCode-SJYRBOAX.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/reg.fulltext.$regCode':{'id':'routes/fetch/reg.fulltext.$regCode','parentId':'root','path':'fetch/reg/fulltext/:regCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/reg.fulltext.$regCode-SV42QWDP.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/gloss/$glossCode':{'id':'routes/gloss/$glossCode','parentId':'root','path':'gloss/:glossCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/gloss/$glossCode-PHIMGTOS.js','imports':['/build/_shared/chunk-SW2WAD6Y.js','/build/_shared/chunk-35YDODSN.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-MR2Y6Q4S.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/gloss/index':{'id':'routes/gloss/index','parentId':'root','path':'gloss','index':true,'caseSensitive':undefined,'module':'/build/routes/gloss/index-S4ZLUSBH.js','imports':['/build/_shared/chunk-M4D3OZQE.js','/build/_shared/chunk-SW2WAD6Y.js','/build/_shared/chunk-35YDODSN.js','/build/_shared/chunk-ZMXBJVIV.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/gloss_datatable':{'id':'routes/gloss_datatable','parentId':'root','path':'gloss_datatable','index':undefined,'caseSensitive':undefined,'module':'/build/routes/gloss_datatable-MIHM6J5Z.js','imports':['/build/_shared/chunk-TVJDINII.js','/build/_shared/chunk-DEXX44ZO.js','/build/_shared/chunk-ZMXBJVIV.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-LZHDFD7B.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/letters':{'id':'routes/letters','parentId':'root','path':'letters','index':undefined,'caseSensitive':undefined,'module':'/build/routes/letters-ABZUL6SC.js','imports':['/build/_shared/chunk-TVJDINII.js','/build/_shared/chunk-DEXX44ZO.js','/build/_shared/chunk-ZMXBJVIV.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes':{'id':'routes/notes','parentId':'root','path':'notes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes-JGTMVFIB.js','imports':['/build/_shared/chunk-TVJDINII.js','/build/_shared/chunk-DEXX44ZO.js','/build/_shared/chunk-ZMXBJVIV.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reg':{'id':'routes/reg','parentId':'root','path':'reg','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reg-BYI7FNWY.js','imports':['/build/_shared/chunk-MR2Y6Q4S.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reg/$regCode':{'id':'routes/reg/$regCode','parentId':'routes/reg','path':':regCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reg/$regCode-WKFOQRHW.js','imports':['/build/_shared/chunk-AWD52SF5.js','/build/_shared/chunk-6EQGYKY7.js','/build/_shared/chunk-M4D3OZQE.js','/build/_shared/chunk-35YDODSN.js','/build/_shared/chunk-DEXX44ZO.js','/build/_shared/chunk-ZMXBJVIV.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-TN3QNU6F.js','/build/_shared/chunk-HASI3UDZ.js','/build/_shared/chunk-BKODUN5L.js','/build/_shared/chunk-CVMSKPMO.js','/build/_shared/chunk-UXJTOQFQ.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reg/$regCode.fulltext':{'id':'routes/reg/$regCode.fulltext','parentId':'routes/reg','path':':regCode/fulltext','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reg/$regCode.fulltext-P2LZ443O.js','imports':['/build/_shared/chunk-AWD52SF5.js','/build/_shared/chunk-6EQGYKY7.js','/build/_shared/chunk-M4D3OZQE.js','/build/_shared/chunk-35YDODSN.js','/build/_shared/chunk-DEXX44ZO.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-HASI3UDZ.js','/build/_shared/chunk-BKODUN5L.js','/build/_shared/chunk-CVMSKPMO.js','/build/_shared/chunk-UXJTOQFQ.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/sand':{'id':'routes/sand','parentId':'root','path':'sand','index':undefined,'caseSensitive':undefined,'module':'/build/routes/sand-F5VSSERP.js','imports':['/build/_shared/chunk-ZMXBJVIV.js','/build/_shared/chunk-3MBIIICT.js','/build/_shared/chunk-G2GGUSV5.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-F5F77374.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes\\\\fetch\\\\reg.$authName.$perPage.$pageNum.tsx\";\nimport * as route2 from \"./routes\\\\fetch\\\\chron.$perPage.$pageNum.tsx\";\nimport * as route3 from \"./routes\\\\fetch\\\\gloss.$perPage.$pageNum.tsx\";\nimport * as route4 from \"./routes\\\\fetch\\\\reg.fulltext.$regCode.tsx\";\nimport * as route5 from \"./routes\\\\fetch\\\\reg.details.$regCode.tsx\";\nimport * as route6 from \"./routes\\\\fetch\\\\chron.search.$query.tsx\";\nimport * as route7 from \"./routes\\\\fetch\\\\chron.count.tsx\";\nimport * as route8 from \"./routes\\\\fetch\\\\gloss.count.tsx\";\nimport * as route9 from \"./routes\\\\gloss\\\\$glossCode.tsx\";\nimport * as route10 from \"./routes\\\\fetch\\\\reg.count.tsx\";\nimport * as route11 from \"./routes\\\\gloss_datatable.tsx\";\nimport * as route12 from \"./routes\\\\gloss\\\\index.tsx\";\nimport * as route13 from \"./routes\\\\letters.tsx\";\nimport * as route14 from \"./routes\\\\chron.tsx\";\nimport * as route15 from \"./routes\\\\chron\\\\$chronCode.tsx\";\nimport * as route16 from \"./routes\\\\chron\\\\cal.tsx\";\nimport * as route17 from \"./routes\\\\index.tsx\";\nimport * as route18 from \"./routes\\\\notes.tsx\";\nimport * as route19 from \"./routes\\\\sand.tsx\";\nimport * as route20 from \"./routes\\\\reg.tsx\";\nimport * as route21 from \"./routes\\\\reg\\\\$regCode.fulltext.tsx\";\nimport * as route22 from \"./routes\\\\reg\\\\$regCode.tsx\";\nimport * as route23 from \"./routes\\\\at.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public\\\\build\";\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/fetch/reg.$authName.$perPage.$pageNum\": {\n      id: \"routes/fetch/reg.$authName.$perPage.$pageNum\",\n      parentId: \"root\",\n      path: \"fetch/reg/:authName/:perPage/:pageNum\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/fetch/chron.$perPage.$pageNum\": {\n      id: \"routes/fetch/chron.$perPage.$pageNum\",\n      parentId: \"root\",\n      path: \"fetch/chron/:perPage/:pageNum\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/fetch/gloss.$perPage.$pageNum\": {\n      id: \"routes/fetch/gloss.$perPage.$pageNum\",\n      parentId: \"root\",\n      path: \"fetch/gloss/:perPage/:pageNum\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/fetch/reg.fulltext.$regCode\": {\n      id: \"routes/fetch/reg.fulltext.$regCode\",\n      parentId: \"root\",\n      path: \"fetch/reg/fulltext/:regCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/fetch/reg.details.$regCode\": {\n      id: \"routes/fetch/reg.details.$regCode\",\n      parentId: \"root\",\n      path: \"fetch/reg/details/:regCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/fetch/chron.search.$query\": {\n      id: \"routes/fetch/chron.search.$query\",\n      parentId: \"root\",\n      path: \"fetch/chron/search/:query\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/fetch/chron.count\": {\n      id: \"routes/fetch/chron.count\",\n      parentId: \"root\",\n      path: \"fetch/chron/count\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/fetch/gloss.count\": {\n      id: \"routes/fetch/gloss.count\",\n      parentId: \"root\",\n      path: \"fetch/gloss/count\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/gloss/$glossCode\": {\n      id: \"routes/gloss/$glossCode\",\n      parentId: \"root\",\n      path: \"gloss/:glossCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/fetch/reg.count\": {\n      id: \"routes/fetch/reg.count\",\n      parentId: \"root\",\n      path: \"fetch/reg/count\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/gloss_datatable\": {\n      id: \"routes/gloss_datatable\",\n      parentId: \"root\",\n      path: \"gloss_datatable\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/gloss/index\": {\n      id: \"routes/gloss/index\",\n      parentId: \"root\",\n      path: \"gloss\",\n      index: true,\n      caseSensitive: undefined,\n      module: route12\n    },\n  \"routes/letters\": {\n      id: \"routes/letters\",\n      parentId: \"root\",\n      path: \"letters\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route13\n    },\n  \"routes/chron\": {\n      id: \"routes/chron\",\n      parentId: \"root\",\n      path: \"chron\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route14\n    },\n  \"routes/chron/$chronCode\": {\n      id: \"routes/chron/$chronCode\",\n      parentId: \"routes/chron\",\n      path: \":chronCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route15\n    },\n  \"routes/chron/cal\": {\n      id: \"routes/chron/cal\",\n      parentId: \"routes/chron\",\n      path: \"cal\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route16\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route17\n    },\n  \"routes/notes\": {\n      id: \"routes/notes\",\n      parentId: \"root\",\n      path: \"notes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route18\n    },\n  \"routes/sand\": {\n      id: \"routes/sand\",\n      parentId: \"root\",\n      path: \"sand\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route19\n    },\n  \"routes/reg\": {\n      id: \"routes/reg\",\n      parentId: \"root\",\n      path: \"reg\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route20\n    },\n  \"routes/reg/$regCode.fulltext\": {\n      id: \"routes/reg/$regCode.fulltext\",\n      parentId: \"routes/reg\",\n      path: \":regCode/fulltext\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route21\n    },\n  \"routes/reg/$regCode\": {\n      id: \"routes/reg/$regCode\",\n      parentId: \"routes/reg\",\n      path: \":regCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route22\n    },\n  \"routes/at\": {\n      id: \"routes/at\",\n      parentId: \"root\",\n      path: \"at\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route23\n    }\n  };"],
  "mappings": "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",
  "names": ["import_react", "import_styles", "theme", "MuiAppBar", "MuiDrawer", "Toolbar", "Box", "CssBaseline", "IconButton", "MenuIcon", "Typography", "GitHubIcon", "client", "entry", "invariant", "loader", "import_tiny_invariant", "axios", "genConfig", "genDataObj", "loader", "invariant", "loader", "import_tiny_invariant", "axios", "genConfig", "genDataObj", "loader", "invariant", "loader", "import_tiny_invariant", "loader", "invariant", "loader", "import_tiny_invariant", "loader", "invariant", "loader", "import_tiny_invariant", "loader", "invariant", "loader", "loader", "loader", "loader", "loader", "import_tiny_invariant", "import_react", "React", "import_Box", "import_Typography", "Box", "Typography", "Tooltip", "Chip", "LinkIcon", "Table", "TableBody", "TableRow", "TableCell", "loader", "invariant", "Button", "ArrowBackIcon", "Paper", "loader", "loader", "loader", "React", "import_styles", "import_Box", "import_IconButton", "import_Toolbar", "import_Table", "import_TableBody", "import_TableCell", "import_TableRow", "import_Typography", "import_react", "loader", "MaterialTable", "Box", "Typography", "Table", "TableBody", "TableRow", "TableCell", "React", "import_react", "import_Box", "import_Paper", "import_core", "TableContainer", "Paper", "MaterialTable", "Box", "InfoIcon", "CollapsibleTable", "loader", "React", "import_styles", "import_Box", "import_Collapse", "import_FirstPage", "import_IconButton", "import_Toolbar", "import_Table", "import_TableBody", "import_TableCell", "import_TableHead", "import_TableRow", "import_Typography", "import_KeyboardArrowDown", "import_KeyboardArrowUp", "import_KeyboardArrowLeft", "import_KeyboardArrowRight", "import_LastPage", "import_core", "import_node", "import_react", "defaultPerPage", "defaultPageNum", "loader", "CollapsibleTable", "defaultPerPage", "defaultPageNum", "MaterialTable", "Box", "Typography", "Table", "TableBody", "TableRow", "TableCell", "import_react", "import_Typography", "import_Button", "import_ArrowBack", "loader", "React", "import_tiny_invariant", "import_react", "import_ArrowBack", "import_Box", "import_Button", "import_KeyboardArrowLeft", "import_KeyboardArrowRight", "import_Paper", "import_TableContainer", "import_Info", "import_core", "React", "import_Box", "import_Chip", "import_Info", "import_Table", "import_TableBody", "import_TableCell", "import_TableRow", "import_Tooltip", "import_Typography", "import_react", "import_IconButton", "getChronRefLink", "OpenInNewIcon", "Box", "Typography", "Tooltip", "Chip", "InfoIcon", "FormControl", "InputLabel", "OutlinedInput", "InputAdornment", "IconButton", "ContentCopy", "Table", "TableBody", "TableRow", "TableCell", "getChronRefLink", "loader", "invariant", "openInNewTab", "Button", "ArrowBack", "Paper", "KeyboardArrowLeft", "KeyboardArrowRight", "TableContainer", "MaterialTable", "RadioGroup", "FormControlLabel", "Radio", "Box", "InfoIcon", "import_react", "FullCalendar", "dayGridPlugin", "CollapsibleTable", "loader", "React", "import_styles", "import_Box", "import_Collapse", "import_FirstPage", "import_IconButton", "import_Toolbar", "import_Table", "import_TableBody", "import_TableCell", "import_TableHead", "import_TableRow", "import_Typography", "import_KeyboardArrowDown", "import_KeyboardArrowUp", "import_KeyboardArrowLeft", "import_KeyboardArrowRight", "import_LastPage", "import_core", "import_node", "import_react", "defaultPerPage", "defaultPageNum", "loader", "CollapsibleTable", "defaultPerPage", "defaultPageNum", "MaterialTable", "Box", "Typography", "Table", "TableBody", "TableRow", "TableCell", "React", "import_Box", "import_Paper", "import_Table", "import_TableBody", "import_TableCell", "import_TableRow", "import_Typography", "import_core", "import_react", "axios", "Paper", "MaterialTable", "Box", "Typography", "Table", "TableBody", "TableRow", "TableCell", "import_react", "import_ArrowBack", "import_Box", "import_Button", "Button", "ArrowBack", "loader", "React", "import_tiny_invariant", "import_react", "import_Box", "import_Paper", "import_Typography", "React", "import_Box", "import_Chip", "import_Info", "import_Link", "import_Table", "import_TableBody", "import_TableCell", "import_TableRow", "import_Tooltip", "import_Typography", "import_react", "import_OpenInNew", "getChronRefLink", "OpenInNewIcon", "Box", "Typography", "Tooltip", "Chip", "InfoIcon", "LinkIcon", "Table", "TableBody", "TableRow", "TableCell", "import_Tooltip", "import_Chip", "loader", "invariant", "Box", "Typography", "Tooltip", "Chip", "DownloadIcon", "Paper", "loader", "React", "import_tiny_invariant", "import_react", "import_Box", "import_FormControlLabel", "import_Radio", "import_RadioGroup", "import_Paper", "import_TableContainer", "import_Info", "import_core", "loader", "invariant", "openInNewTab", "Paper", "TableContainer", "MaterialTable", "RadioGroup", "FormControlLabel", "Radio", "Box", "InfoIcon", "DescriptionIcon", "RegPage", "loader", "import_react", "loader", "RegPage"]
}
