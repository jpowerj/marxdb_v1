{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/root.tsx", "../app/routes/fetch/reg.$authName.$perPage.$pageNum.tsx", "../app/models/docinfo.server.ts", "../app/routes/fetch/chron.$perPage.$pageNum.tsx", "../app/models/event.server.ts", "../app/routes/fetch/gloss.$perPage.$pageNum.tsx", "../app/models/entity.server.ts", "../app/routes/fetch/reg.details.$regCode.tsx", "../app/routes/fetch/chron.count.tsx", "../app/routes/fetch/gloss.count.tsx", "../app/routes/gloss/$glossCode.tsx", "../app/components/entityDetails.tsx", "../app/routes/fetch/reg.count.tsx", "../app/routes/gloss_datatable.tsx", "../app/routes/gloss/index.tsx", "../app/routes/letters.tsx", "../app/routes/chron.tsx", "../app/routes/chron/$chronCode.tsx", "../app/components/eventDetails.tsx", "../app/routes/chron/cal.tsx", "../app/routes/index.tsx", "../app/routes/notes.tsx", "../app/routes/sand.tsx", "../app/routes/reg.tsx", "../app/routes/reg/$regCode.tsx", "../app/components/entryDetails.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { LinksFunction, LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Form,\n  Link,\n  Links,\n  LiveReload,\n  Meta,\n  NavLink,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLocation,\n  useLoaderData\n} from \"@remix-run/react\";\nimport {\n  StyledEngineProvider,\n  ThemeProvider,\n  createTheme,\n  responsiveFontSizes\n} from '@mui/material/styles';\n\nconst robotoUrl = \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\";\n\nimport tailwindStylesheetUrl from \"./styles/tailwind.css\";\n\nexport const links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: tailwindStylesheetUrl },\n    { rel: \"stylesheet\", href: robotoUrl }\n  ];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Marx-Engels Digital Cyclopedia\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nimport * as React from 'react';\nimport { styled, useTheme, Theme, CSSObject } from '@mui/material/styles';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport MenuBookIcon from '@mui/icons-material/MenuBook';\nimport MuiDrawer from '@mui/material/Drawer';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nconst dbs = [\n  {\n    name: \"Home\",\n    fullname: \"Marx-Engels Digital Cyclopedia\",\n    route: \"\",\n    icon: \"\uD83C\uDFE0\",\n  },\n  {\n    name: \"Register\",\n    fullname: \"Marx-Engels Digital Register\",\n    route: \"reg/marx\",\n    icon: \"\uD83D\uDCD5\",\n  },\n  {\n    name: \"Chronicle\",\n    fullname: \"Marx-Engels Digital Chronicle\",\n    route: \"chron/list\",\n    icon: \"\uD83D\uDCC5\",\n  },\n  /*\n  {\n    name: \"Notebooks\",\n    fullname: \"Marx-Engels Digital Notebooks\",\n    route: \"notes\",\n    icon: \"\uD83D\uDCD3\",\n  },\n  */\n  /*\n  {\n    name: \"Letters\",\n    fullname: \"Marx-Engels Digital Correspondence\",\n    route: \"letters\",\n    icon: \"\u2709\uFE0F\"\n  },\n  */\n  {\n    name: \"Glossary\",\n    fullname: \"Marx-Engels Digital Glossary\",\n    route: \"gloss/\",\n    //icon: \"\uD83D\uDCD9\",\n    icon: \"\uD83D\uDD0D\"\n  },\n  /*\n  {\n    name: \"Sandbox\",\n    fullname: \"Sandbox\",\n    route: \"sand\",\n    icon: \"\u23F3\",\n  }\n  */\n];\n\n// Drawer Width\nconst drawerWidth = 180;\n\nconst openedMixin = (theme: Theme): CSSObject => ({\n  width: drawerWidth,\n  transition: theme.transitions.create(['width','margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n  overflowX: 'hidden',\n});\n\nconst openedMixinOverlay = (theme: Theme): CSSObject => ({\n  width: drawerWidth,\n  transition: theme.transitions.create(['width'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n  overflowX: 'hidden',\n});\n\nconst closedMixin = (theme: Theme): CSSObject => ({\n  transition: theme.transitions.create(['width','margin'], {\n    easing: theme.transitions.easing.easeOut,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: 0,\n  [theme.breakpoints.up('sm')]: {\n    width: 0,\n  },\n});\n\nconst closedMixinOverlay = (theme: Theme): CSSObject => ({\n  transition: theme.transitions.create(['width'], {\n    easing: theme.transitions.easing.easeOut,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: 0,\n  [theme.breakpoints.up('sm')]: {\n    width: 0,\n  },\n});\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n}));\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar)<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  backgroundColor: getAppBarColor(),\n}));\n\nlet headerDict: { [key: string]: string } = {\n  \"/reg\": \"Marx-Engels Digital Register\",\n  \"/chron\": \"Marx-Engels Digital Chronicle\",\n  \"/notes\": \"Marx-Engels Digital Notebooks\",\n  \"/letters\": \"Marx-Engels Digital Correspondence\",\n  \"/gloss\": \"Marx-Engels Digital Glossary\",\n}\nfunction getAppBarHeader(pathname: string) {\n  // The root page \"/\" is a special case here\n  if (pathname === \"/\") {\n    return \"Marx-Engels Digital Cyclopedia\";\n  }\n  let headerKeys = Object.keys(headerDict);\n  for (var i=0; i < headerKeys.length; i++) {\n    let curHeaderKey = headerKeys[i];\n    if (pathname.startsWith(curHeaderKey)) {\n      return headerDict[curHeaderKey];\n    }\n  }\n  return null;\n}\n\n/*let colorDict: { [key: string]: string } = {\n  \"/\": \"bg-blue-500\",\n  \"/reg\": \"bg-red-500\",\n  \"/chron\": \"bg-green-500\",\n}*/\n// From https://tailwindcss.com/docs/background-color\n// https://tailwindcss.com/docs/customizing-colors\nlet colorRGBDict: { [key: string]: string } = {\n  \"amber-500\": \"#F59E0B\",\n  \"amber-600\": \"#D97706\",\n  \"slate-500\": \"rgb(100 116 139)\",\n  \"green-500\": \"rgb(34 197 94)\",\n  \"green-700\": \"rgb(21 128 61)\",\n  \"red-500\": \"rgb(239 68 68)\",\n  \"red-700\": \"rgb(185 28 28)\",\n  \"blue-500\": \"rgb(59 130 246)\",\n  \"sky-700\": \"rgb(3 105 161)\",\n  \"violet-500\": \"#8B5CF6\",\n  \"violet-600\": \"#7C3AED\",\n}\nfunction colorToRGB(colorName: string): string {\n  return colorRGBDict[colorName];\n}\nlet colorDict: { [key: string]: string } = {\n  \"/reg\": colorToRGB(\"sky-700\"),\n  \"/chron\": colorToRGB(\"red-700\"),\n  \"/notes\": colorToRGB(\"amber-600\"),\n  \"/letters\": colorToRGB(\"violet-600\"),\n  \"/gloss\": colorToRGB(\"green-700\"),\n};\nfunction getAppBarColor() {\n  const location = useLocation();\n  if (location.pathname === \"/\") {\n    return colorToRGB(\"slate-500\");\n  }\n  let colorKeys = Object.keys(colorDict);\n  for (var i = 0; i < colorKeys.length; i++) {\n    let curColorKey = colorKeys[i];\n    if (location.pathname.startsWith(curColorKey)) {\n      return colorDict[curColorKey];\n    }\n  }\n  return colorToRGB(\"slate-500\");\n}\n\n\n/*\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n*/\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n  ({ theme, open }) => ({\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n    boxSizing: 'border-box',\n    ...(open && {\n      ...openedMixin(theme),\n      '& .MuiDrawer-paper': openedMixin(theme),\n    }),\n    ...(!open && {\n      ...closedMixin(theme),\n      '& .MuiDrawer-paper': closedMixin(theme),\n    }),\n  }),\n);\n\nconst OverlayDrawer = styled(MuiDrawer)(\n  ({ theme, open }) => ({\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n    boxSizing: 'border-box',\n    ...(open && {\n      ...openedMixinOverlay(theme),\n      '& .MuiDrawer-paper': openedMixinOverlay(theme),\n    }),\n    ...(!open && {\n      ...closedMixinOverlay(theme),\n      '& .MuiDrawer-paper': closedMixinOverlay(theme),\n    }),\n  }),\n);\n\n\nconst themeOptions = {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#3f51b5',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n  },\n};\n\nconst theme = responsiveFontSizes(createTheme(themeOptions));\ntheme.typography.h4 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem',\n  },\n  [theme.breakpoints.up('md')]: {\n    fontSize: '2.0rem',\n  },\n};\n\nexport function MainUI() {\n  const theme = useTheme();\n  theme.typography.h3 = {\n    fontSize: '1.2rem',\n    '@media (min-width:600px)': {\n      fontSize: '1.5rem',\n    },\n    [theme.breakpoints.up('md')]: {\n      fontSize: '2.4rem',\n    },\n  };\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerClick = () => {\n    setOpen(!open);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const location = useLocation();\n  //console.log(\"location\");\n  //console.log(location);\n\n  const drawer = (\n    <div className=\"h-full border-r bg-gray-50\">\n      <Toolbar />\n      <Box sx={{ overflow: 'auto', overflowX: 'hidden' }}>\n        <ol>\n        {dbs.map((db, index) => (\n          <li key={db.route}>\n            <NavLink\n              className={({ isActive }) =>\n                `block border-b p-4 text-xl ${isActive ? \"bg-white\" : \"bg-gray-50\"}`\n              }\n              to={db.route}\n            >\n              {db.icon}{\" \"}{open ? db.name : \"\"}\n            </NavLink>\n          </li>\n        ))}\n        </ol>\n      </Box>\n    </div>\n  );\n\n  return (\n    <Box\n      sx={{ display: 'flex' }}\n    >\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        sx={{\n          zIndex: (theme) => theme.zIndex.drawer + 1\n        }}\n      >\n        <Toolbar>\n          <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerClick}\n              edge=\"start\"\n              sx={{\n                marginRight: 1,\n              }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h4\" noWrap component=\"div\" sx={{flex:1}}>\n            {getAppBarHeader(location.pathname)}\n          </Typography>\n          <a href=\"https://github.com/jpowerj/digital-marxism/\" target='_blank'>\n          <IconButton\n            component=\"div\"\n            color=\"inherit\"\n            edge=\"end\"\n          >\n            <GitHubIcon sx={{ fontSize: '2.2rem' }} />\n          </IconButton>\n          </a>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        sx={{\n          display: { xs: 'none', sm: 'block' },\n          width: drawerWidth,\n          height: '100%',\n          //flexShrink: 0,\n          overflowX: 'hidden',\n          overflowY: 'scroll',\n          '& .MuiDrawer-paper': { \n            boxSizing: 'border-box',\n            //flexShrink: 0,\n            overflowX: 'hidden',\n            overflowY: 'scroll',\n          },\n        }}\n        open={open}\n      >\n        {drawer}\n      </Drawer>\n      <MuiDrawer\n          variant=\"temporary\"\n          open={open}\n          onClose={handleDrawerClose}\n          onClick={handleDrawerClose}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            width: drawerWidth,\n            overflowX: 'hidden',\n            overflowY: 'scroll',\n            '& .MuiDrawer-paper': { overflowX: 'hidden', overflowY: 'scroll', width: drawerWidth, boxSizing: 'border-box' },\n          }}\n          disableScrollLock={true}\n          anchor=\"left\"\n        >\n          {drawer}\n      </MuiDrawer>\n      <Box\n        component=\"main\"\n        sx={{ flexGrow: 1, p: 2, overflow: 'hidden', overflowY: 'scroll' }}\n        className=\"w-full h-screen max-h-screen flex flex-col\"\n      >\n        <Toolbar className=\"flex-none\" />\n        <Outlet />\n      </Box>\n    </Box>\n  );\n}\n\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full m-0\">\n      <ThemeProvider theme={theme}>\n        <MainUI />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getDocinfoPage, getDocinfoCount } from \"~/models/docinfo.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.authName, \"Expected params.authName\");\n    invariant(params.perPage, \"Expected params.perPage\");\n    invariant(params.pageNum, \"Expected params.pageNum\");\n    let ppInt = Number(params.perPage) || 10;\n    let pnInt = Number(params.pageNum) || 0;\n    let result = await getDocinfoPage(params.authName, ppInt, pnInt);\n    return {\n        docs: result.documents,\n        shown: result.showCount,\n        total: result.totalCount\n    };\n}\n", "const axios = require('axios');\n\n/*\n\nList of all keys:\n0,\"source\"\n1,\"reprint\"\n2,\"full_text\"\n3,\"day_manual\"\n4,\"num_chron_refs\"\n5,\"lang_orig\"\n6,\"any_date\"\n7,\"writing_start_month\"\n8,\"written\"\n9,\"dubious\"\n10,\"dated_day\"\n11,\"type\"\n12,\"cancelled\"\n13,\"reg_section\"\n14,\"posthumous\"\n15,\"published\"\n16,\"_id\"\n17,\"ent_num\"\n18,\"dated\"\n19,\"french_title\"\n20,\"scraped\"\n21,\"month_combined\"\n22,\"more_info\"\n23,\"english_title\"\n24,\"month_manual\"\n25,\"spanish_title\"\n26,\"pub_day\"\n27,\"year_manual\"\n28,\"writing_start_day\"\n29,\"writing_end_day\"\n30,\"writing_end_month\"\n31,\"writing_end_year\"\n32,\"notes\"\n33,\"writing_end_approx\"\n34,\"Chronicle_OCR\"\n35,\"auth\"\n36,\"translation\"\n37,\"dated_month\"\n38,\"day_combined\"\n39,\"dated_year\"\n40,\"pub_month\"\n41,\"pub_year\"\n42,\"writing_start_year\"\n43,\"title\"\n44,\"ent_id\"\n45,\"Misc_Txt_Index\"\n46,\"writing_start_approx\"\n47,\"link\"\n48,\"german_title\"\n49,\"M_involved\"\n50,\"year_combined\"\n51,\"chron_refs\"\n52,\"sampled\"\n*/\n\nfunction genConfig(data: any, action: string) {\n  return {\n    method: \"post\",\n    url: process.env.MONGO_API_BASE_URL + \"/action/\" + action,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Request-Headers\": \"*\",\n      \"api-key\": process.env.MONGO_API_KEY\n    },\n    data\n  };\n}\n\n// Test code for spread (...) operator:\n// https://replit.com/@jpowerj/IllustriousMeekLaw#index.ts\nfunction genDataObj({...dataArgs}) {\n  let dataObj = JSON.stringify({\n    collection: \"register\",\n    database: \"marxdb\",\n    dataSource: process.env.MONGO_CLUSTER_NAME,\n    ...dataArgs\n  });\n  return dataObj;\n}\n\nexport async function getDocinfoCount() {\n  let pipeline = [{ $count: \"count\" }];\n\n  let data = genDataObj({'pipeline': pipeline});\n\n  let config = genConfig(data, \"aggregate\");\n  let result = await axios(config);\n  return result?.data?.documents[0]?.count;\n}\n\nexport async function getDocinfoListItems({ request }: { request: any }) {\n  //let pipeline = [{ $limit: 100 }];\n  // https://www.mongodb.com/docs/atlas/api/data-api-resources/\n  console.log(request);\n\n  let dataOptions = {'limit': 10, 'sort': 'ent_id'};\n  let data = genDataObj(dataOptions);\n\n  let config = genConfig(data, \"find\");\n  let entries = await axios(config);\n  let totalFound = await getDocinfoCount();\n  return {\n    showCount: entries?.data?.documents?.length,\n    totalCount: totalFound,\n    documents: entries?.data?.documents\n  };\n}\n\nexport async function getDocinfoPageTotal(filterOptions: any) {\n  let dataOptions = {\n    sort: {'ent_id': 1},\n    filter: filterOptions\n  };\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"find\");\n  let entries = await axios(config);\n  return entries?.data?.documents?.length;\n}\n\nlet regSectionDict: { [key: string]: string } = {\n  \"marx\": \"M\",\n  \"engels\": \"E\",\n  \"me\": \"ME\",\n  \"st\": \"ST\",\n}\nfunction authNameToRegSection(authName: string): string {\n  // Special case for ST\n  return regSectionDict[authName];\n}\n\nexport async function getDocinfoPage(authName: string, perPage: number, pageNum: number) {\n  //console.log(process.env);\n  let start = perPage * pageNum;\n  let end = start + perPage;\n  // We want to skip max(0, start-1) pages\n  let numToSkip = Math.max(start-1, 0);\n  let cancelledFilter = {'cancelled': {'$ne': true}};\n  // Special case for ST\n  let rsFilter = {};\n  if (authName === \"st\") {\n    rsFilter = {'reg_section': { '$regex': 'ST' } };\n  } else {\n    let regSection = authNameToRegSection(authName);\n    rsFilter = { 'reg_section': { '$eq': regSection } };\n  }\n  let filterOptions = { ...cancelledFilter, ...rsFilter };\n  let dataOptions = {\n    skip: numToSkip,\n    limit: perPage,\n    sort: { 'ent_id': 1 },\n    filter: filterOptions\n  }\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"find\");\n  let entries = await axios(config);\n  let totalFound = await getDocinfoPageTotal(filterOptions);\n  return {\n    showCount: entries?.data?.documents?.length,\n    totalCount: totalFound,\n    documents: entries?.data?.documents\n  };\n}\n\n// Getting a single item's info\n\nexport async function getDocinfo(regCode: string) {\n  let dataOptions = {\n    filter: { 'ent_id': { '$eq': regCode } }\n  }\n  let data = genDataObj(dataOptions);\n  let config = genConfig(data, \"findOne\");\n  let entries = await axios(config);\n  console.log(\"[getDocinfo] entries = \" + Object.keys(entries.data));\n  let docResult = entries?.data?.document;\n  console.log(\"[getDocinfo] returning \" + docResult);\n  return docResult;\n}\n\n// (Old GSheets version)\n/*\nexport async function getDocinfoPage(perPage: number, pageNum: number) {\n  let start = perPage * pageNum;\n  let end = start + perPage;\n  const sheet = doc.sheetsByIndex[0];\n  const pageRows = await sheet.getRows({ offset: start, limit: perPage });\n}\n*/\n\n/*\nexport async function getDocinfoListItems(): Promise<any> {\n  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]\n  console.log(sheet.title);\n  console.log(sheet.rowCount);\n  // Get the first 3 rows\n  const headRows = await sheet.getRows({offset: 0, limit: 3});\n  //return [{rowCount: sheet.rowCount}];\n  //return [{id:1}, {id:2}];\n  //console.log(headRows.map(({ fullObj }: any) => fullObj.ent_id))\n  return convertToReadOnly(headRows);\n}\n*/\n\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getEventPage } from \"~/models/event.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.perPage, \"Expected params.perPage\");\n    invariant(params.pageNum, \"Expected params.pageNum\");\n    let ppInt = Number(params.perPage) || 10;\n    let pnInt = Number(params.pageNum) || 0;\n    let result = await getEventPage(ppInt, pnInt);\n    return {\n        docs: result.documents,\n        shown: result.showCount,\n        total: result.totalCount\n    };   \n}\n", "const axios = require('axios');\r\n\r\nfunction genConfig(data: any, action: string) {\r\n    return {\r\n        method: \"post\",\r\n        url: process.env.MONGO_API_BASE_URL + \"/action/\" + action,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Request-Headers\": \"*\",\r\n            \"api-key\": process.env.MONGO_API_KEY\r\n        },\r\n        data\r\n    };\r\n}\r\n\r\n// Test code for spread (...) operator:\r\n// https://replit.com/@jpowerj/IllustriousMeekLaw#index.ts\r\nfunction genDataObj({ ...dataArgs }) {\r\n    let dataObj = JSON.stringify({\r\n        collection: \"chronicle\",\r\n        database: \"marxdb\",\r\n        dataSource: process.env.MONGO_CLUSTER_NAME,\r\n        ...dataArgs\r\n    });\r\n    return dataObj;\r\n}\r\n\r\nfunction addMonthday(rowData: any) {\r\n    // Compute a monthday field\r\n    rowData.monthday = (rowData.month_start || \"\") + \" \" + (rowData.day_start || \"\")\r\n    rowData.ymd = rowData.year + \" \" + rowData.monthday;\r\n    return rowData;\r\n}\r\n\r\nexport async function getEventCount() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    let data = genDataObj({ 'pipeline': pipeline });\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEventPageTotal() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    \r\n    let data = genDataObj({'pipeline': pipeline});\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEventPage(perPage: number, pageNum: number) {\r\n    //console.log(process.env);\r\n    let start = perPage * pageNum;\r\n    let end = start + perPage;\r\n    // We want to skip max(0, start-1) pages\r\n    let numToSkip = Math.max(start - 1, 0);\r\n    let dataOptions = {\r\n        skip: numToSkip,\r\n        limit: perPage,\r\n        sort: { 'entry_id_clean': 1 },\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"find\");\r\n    let entries = await axios(config);\r\n    for (var i=0; i < entries.data.documents.length; i++) {\r\n        let rowData = entries.data.documents[i];\r\n        // Compute a monthday field\r\n        let curMonthday = (rowData.month_start || \"\") + \" \" + (rowData.day_start || \"\")\r\n        let curYmd = rowData.year + \" \" + curMonthday;\r\n        entries.data.documents[i].monthday = curMonthday;\r\n        entries.data.documents[i].ymd = curYmd;\r\n    }\r\n    let totalFound = await getEventPageTotal();\r\n    return {\r\n        showCount: entries?.data?.documents?.length,\r\n        totalCount: totalFound,\r\n        documents: entries?.data?.documents\r\n    };\r\n}\r\n\r\nexport async function getEvent(chronCode: string) {\r\n    let dataOptions = {\r\n        filter: { 'entry_id_clean': { '$eq': chronCode } }\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"findOne\");\r\n    let entries = await axios(config);\r\n    console.log(\"[getEvent] entries = \" + Object.keys(entries.data));\r\n    let docResult = entries?.data?.document;\r\n    console.log(\"[getEvent] returning \" + docResult);\r\n    docResult = addMonthday(docResult);\r\n    return docResult;\r\n}\r\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getEntityPage } from \"~/models/entity.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.perPage, \"Expected params.perPage\");\n    invariant(params.pageNum, \"Expected params.pageNum\");\n    let ppInt = Number(params.perPage) || 10;\n    let pnInt = Number(params.pageNum) || 0;\n    let result = await getEntityPage(ppInt, pnInt);\n    return {\n        docs: result.documents,\n        shown: result.showCount,\n        total: result.totalCount\n    };   \n}\n", "const axios = require('axios');\r\n\r\nfunction genConfig(data: any, action: string) {\r\n    return {\r\n        method: \"post\",\r\n        url: process.env.MONGO_API_BASE_URL + \"/action/\" + action,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Request-Headers\": \"*\",\r\n            \"api-key\": process.env.MONGO_API_KEY\r\n        },\r\n        data\r\n    };\r\n}\r\n\r\n// Test code for spread (...) operator:\r\n// https://replit.com/@jpowerj/IllustriousMeekLaw#index.ts\r\nfunction genDataObj({ ...dataArgs }) {\r\n    let dataObj = JSON.stringify({\r\n        collection: \"glossary\",\r\n        database: \"marxdb\",\r\n        dataSource: process.env.MONGO_CLUSTER_NAME,\r\n        ...dataArgs\r\n    });\r\n    return dataObj;\r\n}\r\n\r\nexport async function getEntityCount() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    let data = genDataObj({ 'pipeline': pipeline });\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEntityPageTotal() {\r\n    let pipeline = [{ $count: \"count\" }];\r\n    let data = genDataObj({ 'pipeline': pipeline });\r\n    let config = genConfig(data, \"aggregate\");\r\n    let result = await axios(config);\r\n    return result?.data?.documents[0]?.count;\r\n}\r\n\r\nexport async function getEntityPage(perPage: number, pageNum: number) {\r\n    //console.log(process.env);\r\n    let start = perPage * pageNum;\r\n    let end = start + perPage;\r\n    // We want to skip max(0, start-1) pages\r\n    let numToSkip = Math.max(start - 1, 0);\r\n    let dataOptions = {\r\n        skip: numToSkip,\r\n        limit: perPage,\r\n        sort: { 'id': 1 },\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"find\");\r\n    let entries = await axios(config);\r\n    let totalFound = await getEntityPageTotal();\r\n    return {\r\n        showCount: entries?.data?.documents?.length,\r\n        totalCount: totalFound,\r\n        documents: entries?.data?.documents\r\n    };\r\n}\r\n\r\nexport async function getEntity(entCode: string) {\r\n    let dataOptions = {\r\n        filter: { 'id': { '$eq': entCode } }\r\n    }\r\n    let data = genDataObj(dataOptions);\r\n    let config = genConfig(data, \"findOne\");\r\n    let entries = await axios(config);\r\n    console.log(\"[getEntity] entries = \" + Object.keys(entries.data));\r\n    let docResult = entries?.data?.document;\r\n    console.log(\"[getEntity] returning \" + docResult);\r\n    return docResult;\r\n}\r\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { getDocinfo } from \"~/models/docinfo.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    let result = await getDocinfo(params.regCode);\n    return result;\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getDocinfoCount } from \"~/models/docinfo.server\";\nimport { getEventCount } from \"~/models/event.server\";\n\n// Maps url shorthand to Mongo collection name\nlet dbIdMap: { [key: string]: string } = {\n    'reg': 'register',\n    'chron': 'chronicle',\n}\n\nexport async function loader({ request, params }: LoaderArgs) {\n    let result = await getEventCount();\n    return result;\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getEntityCount } from \"~/models/entity.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    let result = await getEntityCount();\n    return result;\n}\n", "import * as React from 'react';\r\nimport type { LoaderArgs } from \"@remix-run/node\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\nimport { json } from \"@remix-run/node\";\r\n\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EntityDetailsPanel } from '~/components/entityDetails'\r\nimport { getEntity } from '~/models/entity.server';\r\n\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n    invariant(params.glossCode, \"Expected params.glossCode\");\r\n    let glossCode = params.glossCode;\r\n    console.log(\"[$glossCode.tsx] glossCode: \" + glossCode);\r\n    let entityData = await getEntity(glossCode);\r\n    return { glossCode: glossCode, entityData: entityData };\r\n}\r\n\r\nexport default function EntityDetailsPage() {\r\n    const reqData = useLoaderData();\r\n    let entityData = reqData.entityData;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <NavLink to={`../../gloss/`}>\r\n                    <Button startIcon={<ArrowBackIcon />}>\r\n                        Back to Glossary\r\n                    </Button>\r\n                </NavLink>\r\n            </div>\r\n            <Paper>\r\n                <EntityDetailsPanel data={entityData} />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n", "import * as React from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Chip from '@mui/material/Chip';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { NavLink } from '@remix-run/react';\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\n\r\nexport function EntityDetailsPanel(props: any) {\r\n    let rowData = props.data;\r\n    console.log(\"[entityDetails] rowData: \" + Object.keys(rowData));\r\n    const [tooltipText, setTooltipText] = React.useState(\"Copy Link\");\r\n    const handleTooltipClose = () => {\r\n        setTooltipText(\"Copy Link\");\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                fontSize: 16,\r\n                padding: 5,\r\n                margin: 5,\r\n            }}\r\n        >\r\n            <Box sx={{ margin: 1 }}>\r\n                <div className=\"grid grid-cols-2 mb-2\">\r\n                    <div className=\"h-full\">\r\n                        <Typography variant=\"h5\" className=\"inline-flex align-middle font-bold\">\r\n                            {rowData.id}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className=\"self-center float-right\">\r\n                        <Tooltip title={tooltipText}>\r\n                            <Chip\r\n                                icon={<LinkIcon />}\r\n                                label={rowData.id}\r\n                                variant=\"outlined\"\r\n                                className=\"float-right\"\r\n                                onMouseLeave={handleTooltipClose}\r\n                                onClick={() => {\r\n                                    //alert('clicked');\r\n                                    navigator.clipboard.writeText(`https://marxdb.com/gloss/${rowData.id}`).then(\r\n                                        function () {\r\n                                            /* clipboard successfully set */\r\n                                            console.log('Success! The text was copied to your clipboard');\r\n                                            setTooltipText(\"Link Copied!\");\r\n                                        },\r\n                                        function () {\r\n                                            /* clipboard write failed */\r\n                                            console.log('Oops! Your browser does not support the Clipboard API');\r\n                                        }\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Tooltip>\r\n                    </div>\r\n                </div>\r\n                <Table size=\"small\" aria-label=\"details\">\r\n                    <TableBody>\r\n                        <TableRow key='header' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Heading\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-bold\">{rowData.header}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='desc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Description\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-mono\">{rowData.text}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='dates'>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Written\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {rowData.written}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Dated\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"dated\") > - 1 ? rowData.dated : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Published\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"published\") > - 1 ? rowData.published : \"NA\"}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {(Object.keys(rowData).indexOf(\"lang_orig\") > -1) &&\r\n                            <TableRow key='langs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Language(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.lang_orig.join(\", \")}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"source\") > -1) &&\r\n                            <TableRow key='sources' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Source(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.source}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"reprint\") > -1) &&\r\n                            <TableRow key='reprints' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Reprints\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.reprint}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"more_info\") > -1) &&\r\n                            <TableRow key='misc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Misc\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.more_info}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"chron_ref_ids\") > -1) &&\r\n                            <TableRow key='chronrefs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Chronicle References\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.chron_ref_ids.map((item: string) => getChronRefLink(item))}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Box>\r\n        </div>\r\n    );\r\n}", "import type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { json } from \"@remix-run/node\";\nimport { useParams } from \"@remix-run/react\";\nimport { getDocinfoCount } from \"~/models/docinfo.server\";\n\nexport async function loader({ request, params }: LoaderArgs) {\n    let result = await getDocinfoCount();\n    return result;\n}\n", "import * as React from 'react';\nimport { useTheme, withStyles } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport Collapse from '@mui/material/Collapse';\n\nimport Chip from '@mui/material/Chip';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport MaterialTable from \"@material-table/core\";\nimport MTableToolbar from '@material-table/core';\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { getDocinfoListItems } from \"~/models/docinfo.server\";\n\nconst defaultPerPage = 3;\nconst defaultPageNum = 0;\n\nexport async function loader({ request }: LoaderArgs) {\n  const docinfoListItems = await getDocinfoListItems();\n  return json({ docinfoListItems });\n}\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number,\n  ) => void;\n}\n\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction createData(\n  id: string,\n  title: string\n) {\n  return {\n    id,\n    title,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nfunction Row(props: { data: ReturnType<typeof createData> }) {\n  const { data } = props;\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\" sx={{ maxWidth: 100, overflowX: 'clip' }}>\n          {data.id}\n        </TableCell>\n        <TableCell>\n          {data.title}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Text Info\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst EnhancedTableToolbar = () => {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h5\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Marx-Engels Digital Register\n      </Typography>\n    </Toolbar>\n  );\n};\n\nexport default function CollapsibleTable() {\n  const initData = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n  // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n\n  React.useEffect(() => {\n    if (fetcher.type === \"init\") {\n      fetcher.load(`/fetch/gloss/${defaultPerPage}/${defaultPageNum}`);\n    }\n  }, [fetcher]);\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rowsOnPage, setRowsOnPage] = React.useState(5);\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsOnPage) : 0;\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const DEMO_DATA = [\n    { id: 1, name: \"Mary\" },\n    { id: 2, name: \"Joe\" },\n    { id: 3, name: \"Jim\" },\n    { id: 4, name: \"Bob\" },\n    { id: 5, name: \"Bernie\" },\n    { id: 6, name: \"Jimbo\" },\n  ];\n  const DEMO_COLS = [\n    { field: \"id\", title: \"Id\" },\n    { field: \"title\", title: \"Title\" },\n  ];\n  return (\n    <div>\n    {fetcher.type !== \"done\" ? <span>Loading...</span> :\n        <MaterialTable\n          columns={DEMO_COLS}\n          detailPanel={\n            ({ rowData }) => {\n              console.log(rowData);\n              return (\n                <div\n                  style={{\n                    fontSize: 16,\n                    padding: 5,\n                    margin: 5,\n                  }}\n                >\n                  <Box sx={{ margin: 1 }}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                      {rowData.title}\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"details\">\n                      <TableBody>\n                        <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              Full Text\n                            </TableCell>\n                            <TableCell colSpan={5}>{rowData.fullText}</TableCell>\n                          </TableRow>\n                          <TableRow key='dates'>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Written\n                            </TableCell>\n                            <TableCell>\n                              1/1/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Dated\n                            </TableCell>\n                            <TableCell>\n                              1/3/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Published\n                            </TableCell>\n                            <TableCell>\n                              1/2/1850\n                            </TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </Box>\n                </div>\n              );\n            }\n          }\n          data={fetcher.data.result}\n          /*\n          components={{\n            Toolbar: (props: any) => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: '0px 10px' }}>\n                  <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                </div>\n              </div>\n            ),\n          }}\n          */\n        />\n    }\n    </div>\n  );\n}", "import * as React from 'react';\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\n\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EntityDetailsPanel } from '~/components/entityDetails'\r\nimport { getEntity } from '~/models/entity.server';\r\n\r\n/*\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n}\r\n*/\r\n\r\nconst openInNewTab = (url: string) => {\r\n    window.open(url, '_blank', 'noopener,noreferrer');\r\n};\r\n\r\nexport default function GlossTable() {\r\n    const data_cols = [\r\n        { field: \"id\", title: \"ID\", width: \"60px\" },\r\n        { field: \"desc\", title: \"Description\", cellStyle: { width: '65%' }, headerStyle: { width: '65%' } }\r\n    ];\r\n    const fetcher = useFetcher();\r\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\r\n    React.useEffect(() => {\r\n        if (fetcher.type === \"init\") {\r\n            fetcher.load(`/fetch/gloss/10/0`);\r\n        }\r\n    }, [fetcher]);\r\n    /*\r\n    const handleChangePage = (\r\n        event: React.MouseEvent<HTMLButtonElement> | null,\r\n        newPage: number,\r\n    ) => {\r\n        setPage(newPage);\r\n    };\r\n    */\r\n\r\n    /*\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    */\r\n    // MaterialTable documentation:\r\n    // Orig: https://material-table.com/#/\r\n    // Core: https://material-table-core.com/\r\n    // For options:\r\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <MaterialTable\r\n                title={\"Glossary\"}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    padding: 'dense',\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10],\r\n                    columnsButton: true,\r\n                    //showTitle: false,\r\n                    exportAllData: true,\r\n                    initialPage: 0,\r\n                    draggable: false,\r\n                    toolbar: true,\r\n                    //sorting: false,\r\n                    paginationType: 'stepped',\r\n                    numberOfPagesAround: 4\r\n                }}\r\n                columns={data_cols}\r\n                detailPanel={\r\n                    ({ rowData }: any) => <EntityDetailsPanel data={rowData} />\r\n                }\r\n                data={(query) =>\r\n                    new Promise((resolve, reject) => {\r\n                        fetch(`/fetch/gloss/10/${query.page}`)\r\n                            .then(response => response.json())\r\n                            .then(rsJson => {\r\n                                resolve({\r\n                                    data: rsJson.docs,\r\n                                    page: query.page,\r\n                                    totalCount: rsJson.total,\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                components={{\r\n                    Cell: (props) => (\r\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[550px]\" {...props} />\r\n                    ),\r\n                    Container: (props) => (\r\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\r\n                    ),\r\n                    Toolbar: (props) => (\r\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-green-700/10\">\r\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\r\n                        </Box>\r\n                    ),\r\n                    Body: (props) => (\r\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\r\n                    ),\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => (\r\n                            <InfoIcon />\r\n                        ),\r\n                        tooltip: \"View Full Info\",\r\n                        onClick: (event, rowData) => {\r\n                            //const rowJson = JSON.stringify(rowData, null, 2);\r\n                            //alert(`Do save operation : ${rowJson}`);\r\n                            openInNewTab(`./${rowData.id}`)\r\n                        },\r\n                    },\r\n                ]}\r\n                localization={{\r\n                    pagination: {\r\n                        labelDisplayedRows: '{from}-{to} of {count}'\r\n                    },\r\n                    toolbar: {\r\n                        nRowsSelected: '{0} row(s) selected'\r\n                    },\r\n                    header: {\r\n                        actions: ''\r\n                    },\r\n                    body: {\r\n                        emptyDataSourceMessage: 'No records to display',\r\n                        filterRow: {\r\n                            filterTooltip: 'Filter'\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </TableContainer>\r\n    );\r\n}", "import * as React from 'react';\nimport { useTheme, withStyles } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport Collapse from '@mui/material/Collapse';\n\nimport Chip from '@mui/material/Chip';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport MaterialTable from \"@material-table/core\";\nimport MTableToolbar from '@material-table/core';\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { getDocinfoListItems } from \"~/models/docinfo.server\";\n\nconst defaultPerPage = 3;\nconst defaultPageNum = 0;\n\nexport async function loader({ request }: LoaderArgs) {\n  const docinfoListItems = await getDocinfoListItems();\n  return json({ docinfoListItems });\n}\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number,\n  ) => void;\n}\n\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction createData(\n  id: string,\n  title: string\n) {\n  return {\n    id,\n    title,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nfunction Row(props: { data: ReturnType<typeof createData> }) {\n  const { data } = props;\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\" sx={{ maxWidth: 100, overflowX: 'clip' }}>\n          {data.id}\n        </TableCell>\n        <TableCell>\n          {data.title}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Text Info\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst EnhancedTableToolbar = () => {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h5\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Marx-Engels Digital Register\n      </Typography>\n    </Toolbar>\n  );\n};\n\nexport default function CollapsibleTable() {\n  const initData = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n  // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n\n  React.useEffect(() => {\n    if (fetcher.type === \"init\") {\n      fetcher.load(`/fetch/gloss/${defaultPerPage}/${defaultPageNum}`);\n    }\n  }, [fetcher]);\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rowsOnPage, setRowsOnPage] = React.useState(5);\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsOnPage) : 0;\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const DEMO_DATA = [\n    { id: 1, name: \"Mary\" },\n    { id: 2, name: \"Joe\" },\n    { id: 3, name: \"Jim\" },\n    { id: 4, name: \"Bob\" },\n    { id: 5, name: \"Bernie\" },\n    { id: 6, name: \"Jimbo\" },\n  ];\n  const DEMO_COLS = [\n    { field: \"id\", title: \"Id\" },\n    { field: \"title\", title: \"Title\" },\n  ];\n  return (\n    <div>\n    {fetcher.type !== \"done\" ? <span>Loading...</span> :\n        <MaterialTable\n          columns={DEMO_COLS}\n          detailPanel={\n            ({ rowData }) => {\n              console.log(rowData);\n              return (\n                <div\n                  style={{\n                    fontSize: 16,\n                    padding: 5,\n                    margin: 5,\n                  }}\n                >\n                  <Box sx={{ margin: 1 }}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                      {rowData.title}\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"details\">\n                      <TableBody>\n                        <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              Full Text\n                            </TableCell>\n                            <TableCell colSpan={3}>{rowData.fullText}</TableCell>\n                          </TableRow>\n                          <TableRow key='dates'>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Written\n                            </TableCell>\n                            <TableCell>\n                              1/1/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Published\n                            </TableCell>\n                            <TableCell>\n                              1/2/1850\n                            </TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </Box>\n                </div>\n              );\n            }\n          }\n          data={fetcher.data.result}\n          /*\n          components={{\n            Toolbar: (props: any) => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: '0px 10px' }}>\n                  <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                </div>\n              </div>\n            ),\n          }}\n          */\n        />\n    }\n    </div>\n  );\n}", "import * as React from 'react';\nimport {\n  Form, Link, NavLink, Outlet,\n  useLoaderData, useLocation \n} from \"@remix-run/react\";\nimport Box from '@mui/material/Box';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from \"@mui/material/Typography\";\nimport Button from '@mui/material/Button';\nimport ArrowBack from '@mui/icons-material/ArrowBack';\n\n\nfunction EventDetailsPage() {\n  //const backSection = getBackSection(ent_id);\n  return (\n    <div>\n      <div>\n        <NavLink to={`../chron/`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to Chronicle\n          </Button>\n        </NavLink>\n      </div>\n      <div>\n        <Outlet />\n      </div>\n      <div>\n        <NavLink to={`../chron/`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to Chronicle\n          </Button>\n        </NavLink>\n      </div>\n    </div>\n  )\n}\n\nfunction CurrentRoute() {\n  const location = useLocation();\n\n  return (\n    <Typography variant=\"body2\" sx={{ pb: 2 }} color=\"text.secondary\">\n      Current route: {location.pathname}\n    </Typography>\n  );\n}\n\nexport default function ChronPage() {\n  let location = useLocation();\n  let pathname = location.pathname;\n  if (pathname.endsWith(\"/\")) {\n    pathname = pathname.substring(0, pathname.length - 1);\n  }\n  // And now check if it's a detail or main page\n  /*\n  if (!pathname.endsWith(\"chron\")) {\n    return EventDetailsPage();\n  }\n  */\n  /*\n  const [activeTab, setActiveTab] = React.useState(0);\n  React.useEffect(() => {\n    setActiveTab(1);\n  }, []);\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  */\n  return (\n    <Outlet />\n  );\n}", "import * as React from 'react';\r\nimport type { LoaderArgs } from \"@remix-run/node\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\nimport { json } from \"@remix-run/node\";\r\n\r\nimport ArrowBack from '@mui/icons-material/ArrowBack';\r\nimport ArrowForward from '@mui/icons-material/ArrowForward';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EventDetailsPanel } from '~/components/eventDetails'\r\nimport { getEvent } from '~/models/event.server';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Radio from '@mui/material/Radio';\r\n\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n    invariant(params.chronCode, \"Expected params.chronCode\");\r\n    let chronCode = params.chronCode;\r\n    console.log(\"[$chronCode.tsx] chronCode: \" + chronCode);\r\n    if (chronCode === \"\") {\r\n        // Default to list view\r\n        return { type: 'chron', viewName: \"list\" };\r\n    } else if (viewCodes.indexOf(chronCode) > -1) {\r\n        // Specific view\r\n        return { type: 'chron', viewName: chronCode };\r\n    } else {\r\n        // Assume it's an entry id, and fetch the data for it\r\n        let entryData = await getEvent(chronCode);\r\n        // And compute a monthday field\r\n        entryData.monthday = entryData.month_start + \" \" + entryData.day_start;\r\n        return { type: 'details', chronCode: chronCode, entryData: entryData };\r\n    }\r\n}\r\n\r\nconst openInNewTab = (url: string) => {\r\n    window.open(url, '_blank', 'noopener,noreferrer');\r\n};\r\n\r\nconst viewCodes = ['list', 'cal'];\r\n\r\nfunction EventDetailsPage(entryData: any) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <NavLink to={`../../chron/list`}>\r\n                    <Button startIcon={<ArrowBack />}>\r\n                        Back to Chronicle\r\n                    </Button>\r\n                </NavLink>\r\n            </div>\r\n            <Paper>\r\n                <EventDetailsPanel data={entryData} />\r\n            </Paper>\r\n            <div>\r\n                <div className=\"float-left\">\r\n                <NavLink to={`../../chron/list`}>\r\n                    <Button startIcon={<KeyboardArrowLeft />}>\r\n                        Previous Record\r\n                    </Button>\r\n                </NavLink>\r\n                </div>\r\n                <div className=\"float-right\">\r\n                    <NavLink to={`../../chron/list`}>\r\n                        <Button endIcon={<KeyboardArrowRight />}>\r\n                            Next Record\r\n                        </Button>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ChronTable() {\r\n    const reqData = useLoaderData();\r\n    console.log(\"[ChronTable()] reqData: \" + Object.keys(reqData));\r\n    console.log(\"[ChronTable()] type: \" + reqData.type);\r\n    console.log(\"[ChronTable()] viewType: \" + reqData.viewName);\r\n    if (reqData.type === \"details\") {\r\n        return EventDetailsPage(reqData.entryData);\r\n    }\r\n    // (Otherwise reqData.type === \"chron\")\r\n    const data_cols = [\r\n        { field: \"entry_id_clean\", title: \"ID\", width: \"60px\" },\r\n        { field: \"year\", title: \"Year\", width: \"60px\" },\r\n        { field: \"header\", title: \"Heading\", cellStyle: { width: '120px', maxWidth: '140px' }, headerStyle: { width: '120px', maxWidth: '140px' } },\r\n        { field: \"text\", title: \"Text\", cellStyle: { width: '65%' }, headerStyle: { width: '65%' } },\r\n        { field: \"monthday\", title: \"Date\", width: \"60px\" }\r\n    ];\r\n    const fetcher = useFetcher();\r\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\r\n    React.useEffect(() => {\r\n        if (fetcher.type === \"init\") {\r\n            fetcher.load(`/fetch/chron/10/0`);\r\n        }\r\n    }, [fetcher]);\r\n    /*\r\n    const handleChangePage = (\r\n        event: React.MouseEvent<HTMLButtonElement> | null,\r\n        newPage: number,\r\n    ) => {\r\n        setPage(newPage);\r\n    };\r\n    */\r\n\r\n    /*\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    */\r\n    // MaterialTable documentation:\r\n    // Orig: https://material-table.com/#/\r\n    // Core: https://material-table-core.com/\r\n    // For options:\r\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <MaterialTable\r\n                title={\r\n                    <div>\r\n                        <RadioGroup row={true} value={reqData.viewName}>\r\n                            <NavLink to=\"../list\"><FormControlLabel control={<Radio />} label=\"List View\" value=\"list\" /></NavLink>\r\n                            <NavLink to=\"../cal\"><FormControlLabel control={<Radio />} label=\"Calendar View\" value=\"cal\" /></NavLink>\r\n                        </RadioGroup>\r\n                    </div>\r\n                }\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    padding: 'dense',\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10],\r\n                    columnsButton: true,\r\n                    //showTitle: false,\r\n                    exportAllData: true,\r\n                    initialPage: 0,\r\n                    draggable: false,\r\n                    toolbar: true,\r\n                    //sorting: false,\r\n                    paginationType: 'stepped',\r\n                    numberOfPagesAround: 4\r\n                }}\r\n                columns={data_cols}\r\n                detailPanel={\r\n                    ({ rowData }: any) => <EventDetailsPanel data={rowData} />\r\n                }\r\n                data={(query) =>\r\n                    new Promise((resolve, reject) => {\r\n                        fetch(`/fetch/chron/10/${query.page}`)\r\n                            .then(response => response.json())\r\n                            .then(rsJson => {\r\n                                resolve({\r\n                                    data: rsJson.docs,\r\n                                    page: query.page,\r\n                                    totalCount: rsJson.total,\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                components={{\r\n                    Cell: (props) => (\r\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[350px]\" {...props} />\r\n                    ),\r\n                    Container: (props) => (\r\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\r\n                    ),\r\n                    Toolbar: (props) => (\r\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-red-700/10\">\r\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\r\n                        </Box>\r\n                    ),\r\n                    Body: (props) => (\r\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\r\n                    ),\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => (\r\n                            <InfoIcon />\r\n                        ),\r\n                        tooltip: \"View Full Info\",\r\n                        onClick: (event, rowData) => {\r\n                            //const rowJson = JSON.stringify(rowData, null, 2);\r\n                            //alert(`Do save operation : ${rowJson}`);\r\n                            openInNewTab(`./${rowData.entry_id_clean}`)\r\n                        },\r\n                    },\r\n                ]}\r\n                localization={{\r\n                    pagination: {\r\n                        labelDisplayedRows: '{from}-{to} of {count}'\r\n                    },\r\n                    toolbar: {\r\n                        nRowsSelected: '{0} row(s) selected'\r\n                    },\r\n                    header: {\r\n                        actions: ''\r\n                    },\r\n                    body: {\r\n                        emptyDataSourceMessage: 'No records to display',\r\n                        filterRow: {\r\n                            filterTooltip: 'Filter'\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </TableContainer>\r\n    );\r\n}", "import * as React from 'react';\r\n\r\nimport ArrowBack from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Chip from '@mui/material/Chip';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { NavLink } from '@remix-run/react';\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ContentCopy from '@mui/icons-material/ContentCopy';\r\n\r\n/*\r\nlet regCodeDict: { [key: string]: string } = {\r\n    \"marx\": \"Marx\",\r\n    \"engels\": \"Engels\",\r\n    \"me\": \"Marx-Engels Joint Works\",\r\n    \"st\": \"Sources/Translations\",\r\n}\r\nfunction regCodeToAuth(authName: string) {\r\n    return titleDict[authName];\r\n}\r\n*/\r\n\r\n/*\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../chron/\" + chronRefId;\r\n    return (\r\n        <Fab variant=\"extended\" sx={{ boxShadow: 0, border: 1 }} className=\"m-2 p-2 cursor-pointer\" size=\"small\" onClick={() => window.open(relUrl, '_blank', 'noopener,noreferrer')}>\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </Fab>\r\n    );\r\n}\r\n*/\r\n\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../../chron/\" + chronRefId;\r\n    return (\r\n        <NavLink to={relUrl} rel=\"noopener,noreferrer\" target=\"_blank\" className=\"m-2 p-2 border border-solid border-black cursor-pointer rounded-full\">\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nfunction getChronRefLinks(chronRefIds: string[]) {\r\n    let y = chronRefIds.map((item: string) => { return getChronRefLink(item)})\r\n    return y.join(\", \")\r\n}\r\n\r\nexport function EventDetailsPanel(props: any) {\r\n    let rowData = props.data;\r\n    //console.log(rowData);\r\n    const [tooltipText, setTooltipText] = React.useState(\"Copy Link\");\r\n    const handleTooltipClose = () => {\r\n        setTooltipText(\"Copy Link\");\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                fontSize: 16,\r\n                padding: 5,\r\n                margin: 5,\r\n            }}\r\n        >\r\n            <Box sx={{ margin: 1 }}>\r\n                <div className=\"grid grid-cols-2 mb-2 items-center\">\r\n                    <Typography variant=\"h5\" className=\"table-cell align-middle font-bold\">\r\n                        {rowData.ymd}\r\n                    </Typography>\r\n                    {rowData.start_approx === \"checked\" &&\r\n                        <Tooltip title=\"Start date is approximate\">\r\n                            <Chip\r\n                                icon={<InfoIcon />}\r\n                                label=\"Approximate\"\r\n                                className=\"m-2 cursor-pointer\"\r\n                            />\r\n                        </Tooltip>\r\n                    }\r\n                    <div className=\"self-center float-right\">\r\n                        <FormControl sx={{ m: 1, width: '36ch' }} variant=\"outlined\" className=\"float-right\">\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Permalink</InputLabel>\r\n                            <OutlinedInput\r\n                                id=\"outlined-adornment-password\"\r\n                                className=\"float-right\"\r\n                                value={`https://marxdb.com/chron/${rowData.entry_id_clean}`}\r\n                                disabled\r\n                                type={'text'}\r\n                                size={'small'}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <Tooltip title={tooltipText}>\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            edge=\"end\"\r\n                                            onClick={() => {\r\n                                                //alert('clicked');\r\n                                                navigator.clipboard.writeText(`https://marxdb.com/chron/${rowData.entry_id_clean}`).then(\r\n                                                    function () {\r\n                                                        /* clipboard successfully set */\r\n                                                        console.log('Success! The text was copied to your clipboard');\r\n                                                        setTooltipText(\"Link Copied!\");\r\n                                                    },\r\n                                                    function () {\r\n                                                        /* clipboard write failed */\r\n                                                        console.log('Oops! Your browser does not support the Clipboard API');\r\n                                                    }\r\n                                                )\r\n                                            }}\r\n                                        >\r\n                                            {<ContentCopy />}\r\n                                        </IconButton>\r\n                                        </Tooltip>\r\n                                    </InputAdornment>\r\n                                }\r\n                                label=\"Permalink\"\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                </div>\r\n                <Table size=\"small\" aria-label=\"details\">\r\n                    <TableBody>\r\n                        <TableRow key='header' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Heading\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-bold\">{rowData.header}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='desc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Description\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-mono\">{rowData.text}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='dates'>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Written\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {rowData.written}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Dated\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"dated\") > - 1 ? rowData.dated : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Published\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"published\") > - 1 ? rowData.published : \"NA\"}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {(Object.keys(rowData).indexOf(\"lang_orig\") > -1) &&\r\n                            <TableRow key='langs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Language(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.lang_orig.join(\", \")}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"source\") > -1) &&\r\n                            <TableRow key='sources' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Source(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.source}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"reprint\") > -1) &&\r\n                            <TableRow key='reprints' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Reprints\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.reprint}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"more_info\") > -1) &&\r\n                            <TableRow key='misc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Misc\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.more_info}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"chron_ref_ids\") > -1) &&\r\n                            <TableRow key='chronrefs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Chronicle References\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.chron_ref_ids.map((item: string) => getChronRefLink(item))}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Box>\r\n        </div>\r\n    );\r\n}", "import FullCalendar from '@fullcalendar/react' // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\r\n\r\nexport default function ChronCal() {\r\n    return (\r\n        <FullCalendar\r\n            plugins={[dayGridPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n        />\r\n    )\r\n}", "export default function CycloPage() {\n    return (\n        <div className=\"container\">\n            <div>\n                <p className=\"font-bold\">Welcome to the Marx-Engels Digital Cyclopedia!</p>\n            </div>\n            <div>\n                <p>Choose a database in the menu on the left to get started.</p>\n            </div>\n        </div>\n    );\n}", "import * as React from 'react';\nimport { useTheme, withStyles } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport Collapse from '@mui/material/Collapse';\n\nimport Chip from '@mui/material/Chip';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport MaterialTable from \"@material-table/core\";\nimport MTableToolbar from '@material-table/core';\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { getDocinfoListItems } from \"~/models/docinfo.server\";\n\nconst defaultPerPage = 3;\nconst defaultPageNum = 0;\n\nexport async function loader({ request }: LoaderArgs) {\n  const docinfoListItems = await getDocinfoListItems();\n  return json({ docinfoListItems });\n}\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number,\n  ) => void;\n}\n\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction createData(\n  id: string,\n  title: string\n) {\n  return {\n    id,\n    title,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nfunction Row(props: { data: ReturnType<typeof createData> }) {\n  const { data } = props;\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\" sx={{ maxWidth: 100, overflowX: 'clip' }}>\n          {data.id}\n        </TableCell>\n        <TableCell>\n          {data.title}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Text Info\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst EnhancedTableToolbar = () => {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h5\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Marx-Engels Digital Register\n      </Typography>\n    </Toolbar>\n  );\n};\n\nexport default function CollapsibleTable() {\n  const initData = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n  // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n\n  React.useEffect(() => {\n    if (fetcher.type === \"init\") {\n      fetcher.load(`/fetch/gloss/${defaultPerPage}/${defaultPageNum}`);\n    }\n  }, [fetcher]);\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rowsOnPage, setRowsOnPage] = React.useState(5);\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsOnPage) : 0;\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const DEMO_DATA = [\n    { id: 1, name: \"Mary\" },\n    { id: 2, name: \"Joe\" },\n    { id: 3, name: \"Jim\" },\n    { id: 4, name: \"Bob\" },\n    { id: 5, name: \"Bernie\" },\n    { id: 6, name: \"Jimbo\" },\n  ];\n  const DEMO_COLS = [\n    { field: \"id\", title: \"Id\" },\n    { field: \"title\", title: \"Title\" },\n  ];\n  return (\n    <div>\n    {fetcher.type !== \"done\" ? <span>Loading...</span> :\n        <MaterialTable\n          columns={DEMO_COLS}\n          detailPanel={\n            ({ rowData }) => {\n              console.log(rowData);\n              return (\n                <div\n                  style={{\n                    fontSize: 16,\n                    padding: 5,\n                    margin: 5,\n                  }}\n                >\n                  <Box sx={{ margin: 1 }}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                      {rowData.title}\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"details\">\n                      <TableBody>\n                        <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              Full Text\n                            </TableCell>\n                            <TableCell colSpan={3}>{rowData.fullText}</TableCell>\n                          </TableRow>\n                          <TableRow key='dates'>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Written\n                            </TableCell>\n                            <TableCell>\n                              1/1/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Published\n                            </TableCell>\n                            <TableCell>\n                              1/2/1850\n                            </TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </Box>\n                </div>\n              );\n            }\n          }\n          data={fetcher.data.result}\n          /*\n          components={{\n            Toolbar: (props: any) => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: '0px 10px' }}>\n                  <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                </div>\n              </div>\n            ),\n          }}\n          */\n        />\n    }\n    </div>\n  );\n}", "import * as React from 'react';\nconst axios = require(\"axios\");\n\nimport Box from '@mui/material/Box';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport MaterialTable, { MTableToolbar, MTableBody, MTableHeader, MTablePagination } from \"@material-table/core\";\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { Form, Link, useLoaderData, useFetcher, useSubmit } from \"@remix-run/react\";\nimport { IconButton, TableContainer, useTheme } from '@mui/material';\n\nfunction MTableSandbox() {\n    //let movies = useLoaderData();\n    let fetcher = useFetcher();\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n    React.useEffect(() => {\n        if (fetcher.type === \"init\") {\n            fetcher.load(`/fetch/sand/10/0`);\n        }\n    }, [fetcher]);\n\n    return (\n        fetcher.type !== \"done\" ? <div>Loading...</div> :\n        <div>\n            <h1>Movies</h1>\n            <Form method=\"get\">\n                <p>\n                    Showing {fetcher.data.totalShown} of {fetcher.data.totalCount} docs\n                </p>\n            </Form>\n            <ul>\n                {fetcher.data.docs.map((doc) => (\n                    <li key={doc.title}>\n                        <Link to={doc.title}>{doc.title}</Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\n\nexport default function SandboxTable() {\n    const data_cols = [\n        { field: \"ent_id\", title: \"ID\", width: \"100px\" },\n        { field: \"title\", title: \"Title\" },\n        { field: \"year_combined\", title: \"Year\", width: \"100px\" },\n    ];\n    const fetcher = useFetcher();\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n    React.useEffect(() => {\n        if (fetcher.type === \"init\") {\n            fetcher.load(`/fetch/sand/10/0`);\n        }\n    }, [fetcher]);\n    /*\n    const handleChangePage = (\n        event: React.MouseEvent<HTMLButtonElement> | null,\n        newPage: number,\n    ) => {\n        setPage(newPage);\n    };\n    */\n\n    /*\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    */\n    // MaterialTable documentation:\n    // Orig: https://material-table.com/#/\n    // Core: https://material-table-core.com/\n    return (\n        <TableContainer component={Paper}>\n            <MaterialTable\n                title={\"Sandbox Table\"}\n                options={{\n                    padding: 'dense', pageSize: 10, pageSizeOptions: [10],\n                    //showTitle: false,\n                    exportAllData: true,\n                    initialPage: 0\n                }}\n                columns={data_cols}\n                detailPanel={\n                    ({ rowData }: any) => {\n                        console.log(rowData);\n                        return (\n                            <div\n                                style={{\n                                    fontSize: 16,\n                                    padding: 5,\n                                    margin: 5,\n                                }}\n                            >\n                                <Box sx={{ margin: 1 }}>\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                        {rowData.title}\n                                    </Typography>\n                                    <Table size=\"small\" aria-label=\"details\">\n                                        <TableBody>\n                                            <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                                                <TableCell\n                                                    component=\"th\"\n                                                    scope=\"row\"\n                                                    sx={{ fontWeight: 'bold' }}\n                                                >\n                                                    Full Text\n                                                </TableCell>\n                                                <TableCell colSpan={5} className=\"font-mono\">{rowData.full_text}</TableCell>\n                                            </TableRow>\n                                            <TableRow key='dates'>\n                                                <TableCell sx={{ fontWeight: 'bold' }}>\n                                                    Written\n                                                </TableCell>\n                                                <TableCell>\n                                                    1/1/1850\n                                                </TableCell>\n                                                <TableCell sx={{ fontWeight: 'bold' }}>\n                                                    Dated\n                                                </TableCell>\n                                                <TableCell>\n                                                    1/3/1850\n                                                </TableCell>\n                                                <TableCell sx={{ fontWeight: 'bold' }}>\n                                                    Published\n                                                </TableCell>\n                                                <TableCell>\n                                                    1/2/1850\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                </Box>\n                            </div>\n                        );\n                    }\n                }\n                data={(query) =>\n                    new Promise((resolve, reject) => {\n                        fetch(`/fetch/sand/10/${query.page}`)\n                            .then(response => response.json())\n                            .then(rsJson => {\n                                resolve({\n                                    data: rsJson.docs,\n                                    page: query.page,\n                                    totalCount: rsJson.total,\n                                })\n                            })\n                    })\n                }\n                components={{\n                    Container: (props) => (\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%' }} elevation={1} {...props} />\n                    ),\n\n                    Toolbar: (props) => (\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-green-700/10\">\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\n                        </Box>\n                    ),\n                    Body: (props) => (\n                        <MTableBody className=\"\" {...props} />\n                    ),\n\n                }}\n            />\n        </TableContainer>\n    );\n}\n\n// <li key={row.name}>{row}</li>\n\n// {\n//     data.docinfoListItems.map((row: any, index: any) => (\n//         <li>{row.ent_id}</li>\n//     ))\n// }\n\n/*\n\n// Old Pagination:\nPagination: (props) => (\n        <Box className=\"flex justify-end bg-green-700/20\" sx={{ borderTop: '1px solid rgba(184,184,184,1)' }}>\n            <MTablePagination colspan={3} className=\"flex justify-end\" {...props} />\n        </Box>\n    )\n*/\n\n// Old table container:\n/*\n<div className=\"flex grow h-full max-h-full flex-col min-h-0\">\n*/\n\n// Toolbar example\n/*\n                    components={{\n                      Toolbar: (props: any) => (\n                        <div>\n                          <MTableToolbar {...props} />\n                          <div style={{ padding: '0px 10px' }}>\n                            <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                            <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                          </div>\n                        </div>\n                      ),\n                    }}\n                    */\n\n// Custom pagination attempt\n/*\nPagination: (props) => (\n    <Box className=\"flex justify-end bg-green-700/10\" sx={{ borderTop: '1px solid rgba(184,184,184,1)' }}>\n        <TableRow>\n            <MTablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={3}\n                totalCount={1000}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n                className=\"flex justify-end\"\n                {...props}\n            />\n        </TableRow>\n    </Box>\n),\n*/\n// use with: data = { fetcher.data.result }", "import * as React from 'react';\nimport { Form, Link, NavLink, Outlet, useLocation } from \"@remix-run/react\";\n\nimport ArrowBack from '@mui/icons-material/ArrowBack';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableRow from '@mui/material/TableRow';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableHeader, MTablePagination } from \"@material-table/core\";\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n  \nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 1 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nlet tabVals: { [key: string]: number } = {\n  \"marx\": 0,\n  \"engels\": 1,\n  \"me\": 2,\n  \"st\": 3,\n}\nfunction getTabVal(authName: string) {\n  return tabVals[authName];\n}\n\nfunction getBackSection(ent_id: string) {\n  if (ent_id.startsWith(\"ME\")) {\n    return {regCode: \"me\", regName: \"Marx-Engels\"};\n  } else if (ent_id.startsWith(\"M\")) {\n    return {regCode: \"marx\", regName: \"Marx\"};\n  } else if (ent_id.startsWith(\"E\")) {\n    return {regCode: \"engels\", regName: \"Engels\"};\n  } else {\n    return {regCode: \"st\", regName: \"Sources/Translations\"};\n  }\n}\n\nfunction EntryDetails(ent_id: string) {\n  const backSection = getBackSection(ent_id);\n  return (\n    <div>\n      <div>\n        <NavLink to={`../reg/${backSection.regCode}`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to {backSection.regName} Register\n          </Button>\n        </NavLink>\n      </div>\n      <div>\n        <Outlet />\n      </div>\n      <div>\n        <NavLink to={`../reg/`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to Register\n          </Button>\n        </NavLink>\n      </div>\n    </div>\n  )\n}\n\nconst authNames = ['marx','engels','me','st'];\n\nexport default function RegPage() {\n  const location = useLocation();\n  //console.log(location)\n  let pathnameClean = location.pathname;\n  if (pathnameClean.endsWith(\"/\")) {\n    // Remove trailing slash\n    pathnameClean = pathnameClean.slice(0,-1);\n  }\n  const pathElts = pathnameClean.split(\"/\");\n  const regCode = pathElts[pathElts.length-1];\n  console.log(\"[reg.tsx] regCode: \" + regCode);\n  // If it's an author, we can set the active tab\n  let activeTab = 0;\n  if (regCode === \"reg\") {\n    // Default to Marx\n    activeTab = getTabVal('marx');\n  } else if (authNames.indexOf(regCode) > -1) {\n    activeTab = getTabVal(regCode);\n  } else {\n    // Assume it's an entry id and return the details\n    return EntryDetails(regCode);\n  }\n  \n  /*\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  */\n  return (\n    <Outlet />\n  );\n}\n\n\n// Old Tabs obj\n/*\n<Tabs\n            value={activeTab}\n            onChange={handleChange}\n            aria-label=\"basic tabs example\"\n        >\n*/", "import * as React from 'react';\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { useLoaderData, useParams, useFetcher, NavLink, useTransition, useLocation } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Paper from '@mui/material/Paper';\nimport TableContainer from '@mui/material/TableContainer';\nimport InfoIcon from '@mui/icons-material/Info';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\n\nimport { EntryDetailsPanel } from '~/components/entryDetails'\nimport { getDocinfo } from '~/models/docinfo.server';\nimport { RowData } from '@tanstack/react-table';\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    let regCode = params.regCode;\n    if (regCode === \"\") {\n        // Default to Marx\n        return {type: 'auth', authName: \"marx\"};\n    } else if (authCodes.indexOf(regCode) > -1) {\n        // Author\n        return {type: 'auth', authName: regCode};\n    } else {\n        // Assume it's an entry id, and fetch the data for it\n        let entryData = await getDocinfo(regCode);\n        return {type: 'details', regCode: regCode, entryData: entryData};\n    }\n}\n\nconst openInNewTab = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n};\n\nconst authCodes = ['marx','engels','me','st'];\n\nfunction EntryDetailsPage(entryData: any) {\n   return (\n    <Paper>\n        <EntryDetailsPanel data={entryData} />\n    </Paper>\n   );\n}\n\nexport default function RegTable() {\n    const reqData = useLoaderData();\n    if (reqData.type === \"details\") {\n        return EntryDetailsPage(reqData.entryData);\n    }\n    // Otherwise, reqData.type === \"auth\", and we can get the auth name\n    const authName = reqData.authName;\n    const location = useLocation();\n    console.log(\"[$regCode] location.pathname: \" + location.pathname);\n    const tableRef = React.createRef<any>();\n    React.useEffect(() => {\n        tableRef.current && tableRef.current.onQueryChange();\n        console.log(\"[useEffect()] location.pathname: \" + location.pathname)\n    }, [location.pathname])\n    const data_cols = [\n        { field: \"ent_id\", title: \"ID\", width: \"60px\" },\n        { field: \"title\", title: \"Title\", cellStyle: {width: '80%'}, headerStyle: {width: '80%'} },\n        { field: \"year_combined\", title: \"Year\", width: \"60px\" },\n    ];\n    /*\n    const handleChangePage = (\n        event: React.MouseEvent<HTMLButtonElement> | null,\n        newPage: number,\n    ) => {\n        setPage(newPage);\n    };\n    */\n\n    /*\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    */\n    // MaterialTable documentation:\n    // Orig: https://material-table.com/#/\n    // Core: https://material-table-core.com/\n    // For options:\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\n    return (\n        <TableContainer component={Paper}>\n            <MaterialTable\n                title={\n                    <div>\n                    <RadioGroup row={true} value={authName}>\n                            <NavLink to=\"../marx\"><FormControlLabel control={<Radio />} label=\"Marx\" value=\"marx\" /></NavLink>\n                            <NavLink to=\"../engels\"><FormControlLabel control={<Radio />} label=\"Engels\" value=\"engels\" /></NavLink>\n                            <NavLink to=\"../me\"><FormControlLabel control={<Radio />} label=\"Marx-Engels\" value=\"me\" /></NavLink>\n                            <NavLink to=\"../st\"><FormControlLabel control={<Radio />} label=\"Sources/Translations\" value=\"st\" /></NavLink>\n                    </RadioGroup>\n                    </div>\n                }\n                options={{\n                    actionsColumnIndex: -1,\n                    padding: 'dense',\n                    pageSize: 10,\n                    pageSizeOptions: [10],\n                    columnsButton: true,\n                    //showTitle: false,\n                    exportAllData: true,\n                    initialPage: 0,\n                    draggable: false,\n                    toolbar: true,\n                    //sorting: false,\n                    paginationType: 'stepped',\n                    numberOfPagesAround: 4\n                }}\n                tableRef={tableRef}\n                columns={data_cols}\n                detailPanel={\n                    ({ rowData }: any) => <EntryDetailsPanel data={rowData} />\n                }\n                data={(query) =>\n                    new Promise((resolve, reject) => {\n                        console.log(\"Fetching: \" + authName);\n                        fetch(`/fetch/reg/${authName}/10/${query.page}`)\n                            .then(response => response.json())\n                            .then(rsJson => {\n                                resolve({\n                                    data: rsJson.docs,\n                                    page: query.page,\n                                    totalCount: rsJson.total,\n                                })\n                            })\n                    })\n                }\n                components={{\n                    Cell: (props) => (\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[550px]\" {...props} />\n                    ),\n                    Container: (props) => (\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\n                    ),\n                    Toolbar: (props) => (\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-sky-700/10\">\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\n                        </Box>\n                    ),\n                    Body: (props) => (\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\n                    ),\n                }}\n                actions={[\n                    {\n                        icon: () => (\n                            <InfoIcon />\n                        ),\n                        tooltip: \"View Full Info\",\n                        onClick: (event, rowData) => {\n                            //const rowJson = JSON.stringify(rowData, null, 2);\n                            //alert(`Do save operation : ${rowJson}`);\n                            openInNewTab(`./${rowData.ent_id}`)\n                        },\n                    },\n                ]}\n                localization={{\n                    pagination: {\n                        labelDisplayedRows: '{from}-{to} of {count}'\n                    },\n                    toolbar: {\n                        nRowsSelected: '{0} row(s) selected'\n                    },\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No records to display',\n                        filterRow: {\n                            filterTooltip: 'Filter'\n                        }\n                    }\n                }}\n            />\n        </TableContainer>\n    );\n}", "import * as React from 'react';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Chip from '@mui/material/Chip';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { NavLink } from '@remix-run/react';\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\n\r\n/*\r\nlet regCodeDict: { [key: string]: string } = {\r\n    \"marx\": \"Marx\",\r\n    \"engels\": \"Engels\",\r\n    \"me\": \"Marx-Engels Joint Works\",\r\n    \"st\": \"Sources/Translations\",\r\n}\r\nfunction regCodeToAuth(authName: string) {\r\n    return titleDict[authName];\r\n}\r\n*/\r\n\r\n/*\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../chron/\" + chronRefId;\r\n    return (\r\n        <Fab variant=\"extended\" sx={{ boxShadow: 0, border: 1 }} className=\"m-2 p-2 cursor-pointer\" size=\"small\" onClick={() => window.open(relUrl, '_blank', 'noopener,noreferrer')}>\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </Fab>\r\n    );\r\n}\r\n*/\r\n\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../../chron/\" + chronRefId;\r\n    return (\r\n        <NavLink to={relUrl} rel=\"noopener,noreferrer\" target=\"_blank\" className=\"m-2 p-2 border border-solid border-black cursor-pointer rounded-full\">\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nfunction getChronRefLinks(chronRefIds: string[]) {\r\n    let y = chronRefIds.map((item: string) => { return getChronRefLink(item)})\r\n    return y.join(\", \")\r\n}\r\n\r\nexport function EntryDetailsPanel(props: any) {\r\n    let rowData = props.data;\r\n    //console.log(rowData);\r\n    const [tooltipText, setTooltipText] = React.useState(\"Copy Link\");\r\n    const handleTooltipClose = () => {\r\n        setTooltipText(\"Copy Link\");\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                fontSize: 16,\r\n                padding: 5,\r\n                margin: 5,\r\n            }}\r\n        >\r\n            <Box sx={{ margin: 1 }}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    {rowData.title}\r\n                    {rowData.dubious && \r\n                      <Tooltip title=\"Authorship of this text is disputed (see description)\">\r\n                      <Chip\r\n                        icon={<InfoIcon />}\r\n                        label=\"Dubious\"\r\n                        className=\"m-2 cursor-pointer\"\r\n                      />\r\n                      </Tooltip>\r\n                    }\r\n                    <Tooltip title={tooltipText}>\r\n                    <Chip\r\n                      icon={<LinkIcon />}\r\n                      label={rowData.ent_id}\r\n                      variant=\"outlined\"\r\n                      className=\"float-right\"\r\n                      onMouseLeave={handleTooltipClose}\r\n                      onClick={() => {\r\n                        //alert('clicked');\r\n                        navigator.clipboard.writeText(`https://marxdb.com/reg/${rowData.ent_id}`).then(\r\n                            function () {\r\n                                /* clipboard successfully set */\r\n                                console.log('Success! The text was copied to your clipboard');\r\n                                setTooltipText(\"Link Copied!\");\r\n                            },\r\n                            function () {\r\n                                /* clipboard write failed */\r\n                                console.log('Oops! Your browser does not support the Clipboard API');\r\n                            }\r\n                          )\r\n                      }}\r\n                    />\r\n                    </Tooltip>\r\n                </Typography>\r\n                <Table size=\"small\" aria-label=\"details\">\r\n                    <TableBody>\r\n                        <TableRow key='desc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Description\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-mono\">{rowData.full_text}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='dates'>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Written\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"written\") > - 1 ? rowData.written : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Dated\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"dated\") > - 1 ? rowData.dated : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Published\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"published\") > - 1 ? rowData.published : \"NA\"}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {(Object.keys(rowData).indexOf(\"lang_orig\") > -1) &&\r\n                            <TableRow key='langs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Language(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.lang_orig.join(\", \")}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"source\") > -1) &&\r\n                            <TableRow key='sources' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Source(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.source}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"reprint\") > -1) &&\r\n                            <TableRow key='reprints' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Reprints\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.reprint}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"more_info\") > -1) &&\r\n                            <TableRow key='misc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Misc\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.more_info}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"chron_ref_ids\") > -1) &&\r\n                            <TableRow key='chronrefs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Chronicle References\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.chron_ref_ids.map((item: string) => getChronRefLink(item))}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Box>\r\n        </div>\r\n    );\r\n}", "export default {'version':'86eb28dd','entry':{'module':'/build/entry.client-CFBCOVMU.js','imports':['/build/_shared/chunk-EWBL4ASB.js','/build/_shared/chunk-VIU3M2OR.js','/build/_shared/chunk-BNRLY3XL.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-O3YJOUVQ.js','imports':['/build/_shared/chunk-4Y77IDT4.js','/build/_shared/chunk-47XLUKVD.js','/build/_shared/chunk-NEWUZE5G.js','/build/_shared/chunk-VWNFPAXD.js','/build/_shared/chunk-5ZSVRYJ4.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/chron':{'id':'routes/chron','parentId':'root','path':'chron','index':undefined,'caseSensitive':undefined,'module':'/build/routes/chron-ASXJ5HE4.js','imports':['/build/_shared/chunk-SAAUD5M4.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/chron/$chronCode':{'id':'routes/chron/$chronCode','parentId':'routes/chron','path':':chronCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/chron/$chronCode-E2LCULFQ.js','imports':['/build/_shared/chunk-35MLXAJW.js','/build/_shared/chunk-OOQYTCIC.js','/build/_shared/chunk-HOL7K22S.js','/build/_shared/chunk-WCWPCK5W.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-4Y77IDT4.js','/build/_shared/chunk-47XLUKVD.js','/build/_shared/chunk-NEWUZE5G.js','/build/_shared/chunk-VWNFPAXD.js','/build/_shared/chunk-5ZSVRYJ4.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/chron/cal':{'id':'routes/chron/cal','parentId':'routes/chron','path':'cal','index':undefined,'caseSensitive':undefined,'module':'/build/routes/chron/cal-YYMTFOYP.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/chron.$perPage.$pageNum':{'id':'routes/fetch/chron.$perPage.$pageNum','parentId':'root','path':'fetch/chron/:perPage/:pageNum','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/chron.$perPage.$pageNum-AZDGZGVL.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/chron.count':{'id':'routes/fetch/chron.count','parentId':'root','path':'fetch/chron/count','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/chron.count-CD2XFXGH.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/gloss.$perPage.$pageNum':{'id':'routes/fetch/gloss.$perPage.$pageNum','parentId':'root','path':'fetch/gloss/:perPage/:pageNum','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/gloss.$perPage.$pageNum-ZHVQPSPZ.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/gloss.count':{'id':'routes/fetch/gloss.count','parentId':'root','path':'fetch/gloss/count','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/gloss.count-FVHPYT4Z.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/reg.$authName.$perPage.$pageNum':{'id':'routes/fetch/reg.$authName.$perPage.$pageNum','parentId':'root','path':'fetch/reg/:authName/:perPage/:pageNum','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/reg.$authName.$perPage.$pageNum-32BLF2IS.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/reg.count':{'id':'routes/fetch/reg.count','parentId':'root','path':'fetch/reg/count','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/reg.count-BSJSJEI2.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/fetch/reg.details.$regCode':{'id':'routes/fetch/reg.details.$regCode','parentId':'root','path':'fetch/reg/details/:regCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/fetch/reg.details.$regCode-X2WKCVVD.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/gloss/$glossCode':{'id':'routes/gloss/$glossCode','parentId':'root','path':'gloss/:glossCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/gloss/$glossCode-5JJIHOR2.js','imports':['/build/_shared/chunk-M2YUAJCB.js','/build/_shared/chunk-3YBLXEMT.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-SAAUD5M4.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/gloss/index':{'id':'routes/gloss/index','parentId':'root','path':'gloss','index':true,'caseSensitive':undefined,'module':'/build/routes/gloss/index-XDZZQ364.js','imports':['/build/_shared/chunk-M2YUAJCB.js','/build/_shared/chunk-3YBLXEMT.js','/build/_shared/chunk-OOQYTCIC.js','/build/_shared/chunk-WCWPCK5W.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/gloss_datatable':{'id':'routes/gloss_datatable','parentId':'root','path':'gloss_datatable','index':undefined,'caseSensitive':undefined,'module':'/build/routes/gloss_datatable-PLEV6VVQ.js','imports':['/build/_shared/chunk-P4NYRO2C.js','/build/_shared/chunk-HOL7K22S.js','/build/_shared/chunk-WCWPCK5W.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-Y5BDDLG5.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/letters':{'id':'routes/letters','parentId':'root','path':'letters','index':undefined,'caseSensitive':undefined,'module':'/build/routes/letters-MY7OXBBZ.js','imports':['/build/_shared/chunk-P4NYRO2C.js','/build/_shared/chunk-HOL7K22S.js','/build/_shared/chunk-WCWPCK5W.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes':{'id':'routes/notes','parentId':'root','path':'notes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/notes-OQYKFXYH.js','imports':['/build/_shared/chunk-P4NYRO2C.js','/build/_shared/chunk-HOL7K22S.js','/build/_shared/chunk-WCWPCK5W.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reg':{'id':'routes/reg','parentId':'root','path':'reg','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reg-GPHHIDMX.js','imports':['/build/_shared/chunk-SAAUD5M4.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/reg/$regCode':{'id':'routes/reg/$regCode','parentId':'routes/reg','path':':regCode','index':undefined,'caseSensitive':undefined,'module':'/build/routes/reg/$regCode-RZFP2VYI.js','imports':['/build/_shared/chunk-3YBLXEMT.js','/build/_shared/chunk-P4NYRO2C.js','/build/_shared/chunk-35MLXAJW.js','/build/_shared/chunk-OOQYTCIC.js','/build/_shared/chunk-WCWPCK5W.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-4Y77IDT4.js','/build/_shared/chunk-47XLUKVD.js','/build/_shared/chunk-NEWUZE5G.js','/build/_shared/chunk-VWNFPAXD.js','/build/_shared/chunk-5ZSVRYJ4.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/sand':{'id':'routes/sand','parentId':'root','path':'sand','index':undefined,'caseSensitive':undefined,'module':'/build/routes/sand-IRPOZNNN.js','imports':['/build/_shared/chunk-WCWPCK5W.js','/build/_shared/chunk-2VIIVV5G.js','/build/_shared/chunk-FJF4T4CP.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-86EB28DD.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes\\\\fetch\\\\reg.$authName.$perPage.$pageNum.tsx\";\nimport * as route2 from \"./routes\\\\fetch\\\\chron.$perPage.$pageNum.tsx\";\nimport * as route3 from \"./routes\\\\fetch\\\\gloss.$perPage.$pageNum.tsx\";\nimport * as route4 from \"./routes\\\\fetch\\\\reg.details.$regCode.tsx\";\nimport * as route5 from \"./routes\\\\fetch\\\\chron.count.tsx\";\nimport * as route6 from \"./routes\\\\fetch\\\\gloss.count.tsx\";\nimport * as route7 from \"./routes\\\\gloss\\\\$glossCode.tsx\";\nimport * as route8 from \"./routes\\\\fetch\\\\reg.count.tsx\";\nimport * as route9 from \"./routes\\\\gloss_datatable.tsx\";\nimport * as route10 from \"./routes\\\\gloss\\\\index.tsx\";\nimport * as route11 from \"./routes\\\\letters.tsx\";\nimport * as route12 from \"./routes\\\\chron.tsx\";\nimport * as route13 from \"./routes\\\\chron\\\\$chronCode.tsx\";\nimport * as route14 from \"./routes\\\\chron\\\\cal.tsx\";\nimport * as route15 from \"./routes\\\\index.tsx\";\nimport * as route16 from \"./routes\\\\notes.tsx\";\nimport * as route17 from \"./routes\\\\sand.tsx\";\nimport * as route18 from \"./routes\\\\reg.tsx\";\nimport * as route19 from \"./routes\\\\reg\\\\$regCode.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public\\\\build\";\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/fetch/reg.$authName.$perPage.$pageNum\": {\n      id: \"routes/fetch/reg.$authName.$perPage.$pageNum\",\n      parentId: \"root\",\n      path: \"fetch/reg/:authName/:perPage/:pageNum\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/fetch/chron.$perPage.$pageNum\": {\n      id: \"routes/fetch/chron.$perPage.$pageNum\",\n      parentId: \"root\",\n      path: \"fetch/chron/:perPage/:pageNum\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/fetch/gloss.$perPage.$pageNum\": {\n      id: \"routes/fetch/gloss.$perPage.$pageNum\",\n      parentId: \"root\",\n      path: \"fetch/gloss/:perPage/:pageNum\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/fetch/reg.details.$regCode\": {\n      id: \"routes/fetch/reg.details.$regCode\",\n      parentId: \"root\",\n      path: \"fetch/reg/details/:regCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/fetch/chron.count\": {\n      id: \"routes/fetch/chron.count\",\n      parentId: \"root\",\n      path: \"fetch/chron/count\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/fetch/gloss.count\": {\n      id: \"routes/fetch/gloss.count\",\n      parentId: \"root\",\n      path: \"fetch/gloss/count\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/gloss/$glossCode\": {\n      id: \"routes/gloss/$glossCode\",\n      parentId: \"root\",\n      path: \"gloss/:glossCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/fetch/reg.count\": {\n      id: \"routes/fetch/reg.count\",\n      parentId: \"root\",\n      path: \"fetch/reg/count\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/gloss_datatable\": {\n      id: \"routes/gloss_datatable\",\n      parentId: \"root\",\n      path: \"gloss_datatable\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/gloss/index\": {\n      id: \"routes/gloss/index\",\n      parentId: \"root\",\n      path: \"gloss\",\n      index: true,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/letters\": {\n      id: \"routes/letters\",\n      parentId: \"root\",\n      path: \"letters\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/chron\": {\n      id: \"routes/chron\",\n      parentId: \"root\",\n      path: \"chron\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    },\n  \"routes/chron/$chronCode\": {\n      id: \"routes/chron/$chronCode\",\n      parentId: \"routes/chron\",\n      path: \":chronCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route13\n    },\n  \"routes/chron/cal\": {\n      id: \"routes/chron/cal\",\n      parentId: \"routes/chron\",\n      path: \"cal\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route14\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route15\n    },\n  \"routes/notes\": {\n      id: \"routes/notes\",\n      parentId: \"root\",\n      path: \"notes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route16\n    },\n  \"routes/sand\": {\n      id: \"routes/sand\",\n      parentId: \"root\",\n      path: \"sand\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route17\n    },\n  \"routes/reg\": {\n      id: \"routes/reg\",\n      parentId: \"root\",\n      path: \"reg\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route18\n    },\n  \"routes/reg/$regCode\": {\n      id: \"routes/reg/$regCode\",\n      parentId: \"routes/reg\",\n      path: \":regCode\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route19\n    }\n  };"],
  "mappings": "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",
  "names": []
}
