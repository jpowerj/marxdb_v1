{
  "version": 3,
  "sources": ["../../../../app/routes/gloss/index.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\n\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EntityDetailsPanel } from '~/components/entityDetails'\r\nimport { getEntity } from '~/models/entity.server';\r\n\r\n/*\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n}\r\n*/\r\n\r\nconst openInNewTab = (url: string) => {\r\n    window.open(url, '_blank', 'noopener,noreferrer');\r\n};\r\n\r\nexport default function GlossTable() {\r\n    const data_cols = [\r\n        { field: \"id\", title: \"ID\", width: \"60px\" },\r\n        { field: \"desc\", title: \"Description\", cellStyle: { width: '65%' }, headerStyle: { width: '65%' } }\r\n    ];\r\n    const fetcher = useFetcher();\r\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\r\n    React.useEffect(() => {\r\n        if (fetcher.type === \"init\") {\r\n            fetcher.load(`/fetch/gloss/10/0`);\r\n        }\r\n    }, [fetcher]);\r\n    /*\r\n    const handleChangePage = (\r\n        event: React.MouseEvent<HTMLButtonElement> | null,\r\n        newPage: number,\r\n    ) => {\r\n        setPage(newPage);\r\n    };\r\n    */\r\n\r\n    /*\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    */\r\n    // MaterialTable documentation:\r\n    // Orig: https://material-table.com/#/\r\n    // Core: https://material-table-core.com/\r\n    // For options:\r\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <MaterialTable\r\n                title={\"Glossary\"}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    padding: 'dense',\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10],\r\n                    columnsButton: true,\r\n                    //showTitle: false,\r\n                    exportAllData: true,\r\n                    initialPage: 0,\r\n                    draggable: false,\r\n                    toolbar: true,\r\n                    //sorting: false,\r\n                    paginationType: 'stepped',\r\n                    numberOfPagesAround: 4\r\n                }}\r\n                columns={data_cols}\r\n                detailPanel={\r\n                    ({ rowData }: any) => <EntityDetailsPanel data={rowData} />\r\n                }\r\n                data={(query) =>\r\n                    new Promise((resolve, reject) => {\r\n                        fetch(`/fetch/gloss/10/${query.page}`)\r\n                            .then(response => response.json())\r\n                            .then(rsJson => {\r\n                                resolve({\r\n                                    data: rsJson.docs,\r\n                                    page: query.page,\r\n                                    totalCount: rsJson.total,\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                components={{\r\n                    Cell: (props) => (\r\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[550px]\" {...props} />\r\n                    ),\r\n                    Container: (props) => (\r\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\r\n                    ),\r\n                    Toolbar: (props) => (\r\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-green-700/10\">\r\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\r\n                        </Box>\r\n                    ),\r\n                    Body: (props) => (\r\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\r\n                    ),\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => (\r\n                            <InfoIcon />\r\n                        ),\r\n                        tooltip: \"View Full Info\",\r\n                        onClick: (event, rowData) => {\r\n                            //const rowJson = JSON.stringify(rowData, null, 2);\r\n                            //alert(`Do save operation : ${rowJson}`);\r\n                            openInNewTab(`./${rowData.id}`)\r\n                        },\r\n                    },\r\n                ]}\r\n                localization={{\r\n                    pagination: {\r\n                        labelDisplayedRows: '{from}-{to} of {count}'\r\n                    },\r\n                    toolbar: {\r\n                        nRowsSelected: '{0} row(s) selected'\r\n                    },\r\n                    header: {\r\n                        actions: ''\r\n                    },\r\n                    body: {\r\n                        emptyDataSourceMessage: 'No records to display',\r\n                        filterRow: {\r\n                            filterTooltip: 'Filter'\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </TableContainer>\r\n    );\r\n}"],
  "mappings": "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",
  "names": ["MaterialTable", "InfoIcon"]
}
