{
  "version": 3,
  "sources": ["../../../../node_modules/@mui/icons-material/Download.js", "../../../../app/routes/reg/$regCode.fulltext.tsx"],
  "sourcesContent": ["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');\n\nexports.default = _default;", "import * as React from 'react';\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { useLoaderData, useParams, useFetcher, NavLink, useTransition, useLocation } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport LinkIcon from '@mui/icons-material/Link';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Paper from '@mui/material/Paper';\nimport TableContainer from '@mui/material/TableContainer';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\n\nimport { EntryDetailsPanel } from '~/components/entryDetails'\nimport { getFulltext } from '~/models/docinfo.server';\nimport { RowData } from '@tanstack/react-table';\nimport Tooltip from '@mui/material/Tooltip';\nimport Chip from '@mui/material/Chip';\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    console.log(\"[$regCode.fulltext] params.regCode: \" + params.regCode);\n    // Fetch from DB\n    let entryFulltext = await getFulltext(params.regCode);\n    return entryFulltext;\n}\n\nconst openInNewTab = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n};\n\nconst authCodes = ['marx','engels','me','st'];\n\nfunction toHtml(origText: string) {\n    return origText.replaceAll(\"\\n\", \"<br>\");\n}\n\nfunction EntryDetailsPage(entryData: any) {\n   return (\n    <Paper>\n        <EntryDetailsPanel data={entryData} />\n    </Paper>\n   );\n}\n\nfunction FulltextPanel(props: any) {\n    let reqData = props.data;\n    //console.log(rowData);\n    const [tooltipText, setTooltipText] = React.useState(\"Download Fulltext\");\n    const handleTooltipClose = () => {\n        setTooltipText(\"Download Fulltext\");\n    }\n    return (\n        <div\n            style={{\n                fontSize: 16,\n                padding: 5,\n                margin: 5,\n            }}\n        >\n            <Box sx={{ margin: 1 }}>\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                    {reqData.ent_id}: {reqData.title}\n                    {(Object.keys(reqData).indexOf(\"fulltext\") > -1) &&\n                    <Tooltip title={tooltipText}>\n                        <Chip\n                            component=\"a\"\n                            href={`https://drive.google.com/uc?export=download&id=${reqData.drive_id}`}\n                            clickable\n                            icon={<DownloadIcon />}\n                            label={reqData.fulltext_filename}\n                            variant=\"outlined\"\n                            className=\"float-right cursor-pointer\"\n                        />\n                    </Tooltip>\n                    }\n                </Typography>\n\n                <Paper\n                    className=\"break-words p-3 overflow-y-scroll\"\n                    sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }}\n                >\n                    <Typography className=\"h-full max-h-full w-full\">\n                        {(Object.keys(reqData).indexOf(\"fulltext\") > -1) ?\n                        <div className=\"font-mono\" dangerouslySetInnerHTML={{ __html: toHtml(reqData.fulltext) }}></div> : <div className=\"font-mono\">[Fulltext not available]</div>\n                        }\n                    </Typography>\n                </Paper>\n            </Box>\n        </div>\n    );\n}\n\nexport default function FulltextPage() {\n    const reqData = useLoaderData();\n    // Otherwise, reqData.type === \"auth\", and we can get the auth name\n    const authName = reqData.authName;\n    const location = useLocation();\n    const data_cols = [\n        { field: \"ent_id\", title: \"ID\", width: \"60px\" },\n        { field: \"title\", title: \"Title\", cellStyle: {width: '80%'}, headerStyle: {width: '80%'} },\n        { field: \"year_combined\", title: \"Year\", width: \"60px\" },\n    ];\n    return (\n        <FulltextPanel data={reqData} />\n    );\n}\n\n/*\n\nOld Chip onClick:\n\nonClick={() => {\n                                console.log(\"Fulltext download\");\n                                const blob = new Blob([reqData.fulltext], { type: 'text/plain' });\n                                console.log(blob);\n                                const url = URL.createObjectURL(blob);\n                                var link = document.createElement(\"a\");\n                                link.setAttribute(\"href\", url);\n                                link.setAttribute(\"download\", reqData.fulltext_filename);\n                                link.style.visibility = 'hidden';\n                                document.body.appendChild(link); // Required for FF\n                                link.click(); // This will download the data file named \"my_data.csv\".\n                                document.body.removeChild(link);\n                            }}\n\n*/"],
  "mappings": "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",
  "names": ["DownloadIcon"]
}
