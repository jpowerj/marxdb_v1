{
  "version": 3,
  "sources": ["../../../../node_modules/@mui/icons-material/Description.js", "../../../../app/routes/reg/$regCode.tsx"],
  "sourcesContent": ["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\"\n}), 'Description');\n\nexports.default = _default;", "import * as React from 'react';\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { useLoaderData, useParams, useFetcher, NavLink, useTransition, useLocation } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Paper from '@mui/material/Paper';\nimport TableContainer from '@mui/material/TableContainer';\nimport InfoIcon from '@mui/icons-material/Info';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\n\nimport { EntryDetailsPanel } from '~/components/entryDetails'\nimport { getDocinfo } from '~/models/docinfo.server';\nimport { RowData } from '@tanstack/react-table';\n\nexport async function loader({ request, params }: LoaderArgs) {\n    invariant(params.regCode, \"Expected params.regCode\");\n    let regCode = params.regCode;\n    if (regCode === \"\") {\n        // Default to Marx\n        return {type: 'auth', authName: \"marx\"};\n    } else if (authCodes.indexOf(regCode) > -1) {\n        // Author\n        return {type: 'auth', authName: regCode};\n    } else {\n        // Assume it's an entry id, and fetch the data for it\n        let entryData = await getDocinfo(regCode);\n        return {type: 'details', regCode: regCode, entryData: entryData};\n    }\n}\n\nconst openInNewTab = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n};\n\nconst authCodes = ['marx','engels','me','st'];\n\nfunction EntryDetailsPage(entryData: any) {\n   return (\n    <Paper>\n        <EntryDetailsPanel data={entryData} />\n    </Paper>\n   );\n}\n\nexport default function RegTable() {\n    const reqData = useLoaderData();\n    if (reqData.type === \"details\") {\n        return EntryDetailsPage(reqData.entryData);\n    }\n    // Otherwise, reqData.type === \"auth\", and we can get the auth name\n    const authName = reqData.authName;\n    const [lastAuth, setLastAuth] = React.useState(authName);\n    const location = useLocation();\n    console.log(\"[$regCode] location.pathname: \" + location.pathname);\n    const tableRef = React.createRef<any>();\n    React.useEffect(() => {\n        tableRef.current && tableRef.current.onQueryChange();\n        tableRef.current && tableRef.current.onPageChange({}, 0);\n        console.log(\"[useEffect()] location.pathname: \" + location.pathname)\n    }, [location.pathname]);\n   /*\n   React.useEffect(() => {\n    if (!pageReset) {\n        console.log(\"effect\");\n        console.log(tableRef.current);\n        tableRef.current.onPageChange({}, 0);\n        setPageReset(true);\n    }\n   }, []);\n   */\n    const data_cols = [\n        { field: \"entry_id\", title: \"ID\", width: \"60px\" },\n        { field: \"title\", title: \"Title\", cellStyle: {width: '60%'}, headerStyle: {width: '60%'} },\n        { field: \"day_combined\", title: \"Day\", cellStyle: {textAlign: 'right'}, headerStyle: {textAlign: 'right', width: \"50px\"}, width: \"50px\", maxWidth: \"50px\"},\n        { field: \"month_combined\", title: \"Month\", width: \"50px\", maxWidth: \"50px\", cellStyle: {textAlign: 'center'}, headerStyle: {textAlign: 'center'}},\n        { field: \"year_combined\", title: \"Year\", width: \"60px\", maxWidth: \"60px\" },\n    ];\n    // MaterialTable documentation:\n    // Orig: https://material-table.com/#/\n    // Core: https://material-table-core.com/\n    // For options:\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\n    return (\n        <TableContainer component={Paper}>\n            <MaterialTable\n                title={\n                    <div>\n                    <RadioGroup row={true} value={authName}>\n                            <NavLink to=\"../marx\"><FormControlLabel control={<Radio />} label=\"Marx\" value=\"marx\" /></NavLink>\n                            <NavLink to=\"../engels\"><FormControlLabel control={<Radio />} label=\"Engels\" value=\"engels\" /></NavLink>\n                            <NavLink to=\"../me\"><FormControlLabel control={<Radio />} label=\"Marx-Engels\" value=\"me\" /></NavLink>\n                            <NavLink to=\"../st\"><FormControlLabel control={<Radio />} label=\"Sources/Translations\" value=\"st\" /></NavLink>\n                    </RadioGroup>\n                    </div>\n                }\n                options={{\n                    actionsColumnIndex: -1,\n                    padding: 'dense',\n                    pageSize: 10,\n                    pageSizeOptions: [10],\n                    columnsButton: true,\n                    //showTitle: false,\n                    exportAllData: true,\n                    initialPage: 0,\n                    draggable: false,\n                    toolbar: true,\n                    sorting: false,\n                    paginationType: 'stepped',\n                    numberOfPagesAround: 4\n                }}\n                tableRef={tableRef}\n                columns={data_cols}\n                detailPanel={\n                    ({ rowData }: any) => <EntryDetailsPanel data={rowData} />\n                }\n                data={(query) =>\n                    new Promise((resolve, reject) => {\n                        console.log(\"Fetching: \" + authName);\n                        let queryPage = query.page;\n                        if (authName !== lastAuth) {\n                            console.log(\"Changing authors\");\n                            queryPage = 0;\n                            setLastAuth(authName);\n                        }\n                        fetch(`/fetch/reg/${authName}/10/${queryPage}`)\n                            .then(response => response.json())\n                            .then(rsJson => {\n                                resolve({\n                                    data: rsJson.docs,\n                                    page: queryPage,\n                                    totalCount: rsJson.total,\n                                })\n                            })\n                    })\n                }\n                components={{\n                    Cell: (props) => (\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[450px]\" {...props} />\n                    ),\n                    Container: (props) => (\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\n                    ),\n                    Toolbar: (props) => (\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-sky-700/10\">\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\n                        </Box>\n                    ),\n                    Body: (props) => (\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\n                    ),\n                }}\n                actions={[\n                    {\n                        icon: () => (\n                            <InfoIcon />\n                        ),\n                        tooltip: \"View Full Info\",\n                        onClick: (event, rowData) => {\n                            //const rowJson = JSON.stringify(rowData, null, 2);\n                            //alert(`Do save operation : ${rowJson}`);\n                            openInNewTab(`./${rowData.entry_id}`)\n                        },\n                    },\n                    {\n                        icon: () => (\n                            <DescriptionIcon />\n                        ),\n                        tooltip: \"View Full Text\",\n                        onClick: (event, rowData) => {\n                            console.log(\"fulltext\");\n                            openInNewTab(`./${rowData.entry_id}/fulltext`)\n                        }\n                    }\n                ]}\n                localization={{\n                    pagination: {\n                        labelDisplayedRows: '{from}-{to} of {count}'\n                    },\n                    toolbar: {\n                        nRowsSelected: '{0} row(s) selected'\n                    },\n                    header: {\n                        actions: ''\n                    },\n                    body: {\n                        emptyDataSourceMessage: 'No records to display',\n                        filterRow: {\n                            filterTooltip: 'Filter'\n                        }\n                    }\n                }}\n            />\n        </TableContainer>\n    );\n}"],
  "mappings": "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",
  "names": ["MaterialTable", "InfoIcon", "DescriptionIcon"]
}
