{
  "version": 3,
  "sources": ["../../../app/routes/reg.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { Form, Link, NavLink, Outlet, useLocation } from \"@remix-run/react\";\n\nimport ArrowBack from '@mui/icons-material/ArrowBack';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableRow from '@mui/material/TableRow';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\n\nimport MaterialTable, { MTableToolbar, MTableBody, MTableHeader, MTablePagination } from \"@material-table/core\";\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n  \nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 1 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nlet tabVals: { [key: string]: number } = {\n  \"marx\": 0,\n  \"engels\": 1,\n  \"me\": 2,\n  \"st\": 3,\n}\nfunction getTabVal(authName: string) {\n  return tabVals[authName];\n}\n\nfunction getBackSection(ent_id: string) {\n  if (ent_id.startsWith(\"ME\")) {\n    return {regCode: \"me\", regName: \"Marx-Engels\"};\n  } else if (ent_id.startsWith(\"M\")) {\n    return {regCode: \"marx\", regName: \"Marx\"};\n  } else if (ent_id.startsWith(\"E\")) {\n    return {regCode: \"engels\", regName: \"Engels\"};\n  } else {\n    return {regCode: \"st\", regName: \"Sources/Translations\"};\n  }\n}\n\nfunction EntryDetails(ent_id: string) {\n  const backSection = getBackSection(ent_id);\n  return (\n    <div>\n      <div>\n        <NavLink to={`../reg/${backSection.regCode}`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to {backSection.regName} Register\n          </Button>\n        </NavLink>\n      </div>\n      <div>\n        <Outlet />\n      </div>\n      <div>\n        <NavLink to={`../reg/`}>\n          <Button startIcon={<ArrowBack />}>\n            Back to Register\n          </Button>\n        </NavLink>\n      </div>\n    </div>\n  )\n}\n\nconst authNames = ['marx','engels','me','st'];\n\nexport default function RegPage() {\n  const location = useLocation();\n  //console.log(location)\n  let pathnameClean = location.pathname;\n  if (pathnameClean.endsWith(\"/\")) {\n    // Remove trailing slash\n    pathnameClean = pathnameClean.slice(0,-1);\n  }\n  const pathElts = pathnameClean.split(\"/\");\n  const regCode = pathElts[pathElts.length-1];\n  console.log(\"[reg.tsx] regCode: \" + regCode);\n  // If it's an author, we can set the active tab\n  let activeTab = 0;\n  if (regCode === \"reg\") {\n    // Default to Marx\n    activeTab = getTabVal('marx');\n  } else if (authNames.indexOf(regCode) > -1) {\n    activeTab = getTabVal(regCode);\n  } else {\n    // Assume it's an entry id and return the details\n    return EntryDetails(regCode);\n  }\n  \n  /*\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  */\n  return (\n    <Outlet />\n  );\n}\n\n\n// Old Tabs obj\n/*\n<Tabs\n            value={activeTab}\n            onChange={handleChange}\n            aria-label=\"basic tabs example\"\n        >\n*/"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAGA,uBAAsB;AAEtB;AALA;AAmDA,IAAI,UAAqC;AAAA,EACvC,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,MAAM;AAAA,EACN,MAAM;AACR;AACA,SAAS,UAAU,UAAkB;AACnC,SAAO,QAAQ;AACjB;AAEA,SAAS,eAAe,QAAgB;AACtC,MAAI,OAAO,WAAW,IAAI,GAAG;AAC3B,WAAO,EAAC,SAAS,MAAM,SAAS,cAAa;AAAA,EAC/C,WAAW,OAAO,WAAW,GAAG,GAAG;AACjC,WAAO,EAAC,SAAS,QAAQ,SAAS,OAAM;AAAA,EAC1C,WAAW,OAAO,WAAW,GAAG,GAAG;AACjC,WAAO,EAAC,SAAS,UAAU,SAAS,SAAQ;AAAA,EAC9C,OAAO;AACL,WAAO,EAAC,SAAS,MAAM,SAAS,uBAAsB;AAAA,EACxD;AACF;AAEA,SAAS,aAAa,QAAgB;AACpC,QAAM,cAAc,eAAe,MAAM;AACzC,SACE,mDAAC;AAAA,IACC;AAAA,yDAAC;AAAA,QACC,6DAAC;AAAA,UAAQ,IAAI,UAAU,YAAY;AAAA,UACjC,6DAAC;AAAA,YAAO,WAAW,mDAAC,iBAAAA,SAAA,IAAD;AAAA;AAAA;AAAA;AAAA,mBAAW;AAAA,YAAI;AAAA;AAAA,cACvB,YAAY;AAAA,cAAQ;AAAA;AAAA,aAD/B;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,WAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,SALF;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,MACA,mDAAC;AAAA,QACC,6DAAC,YAAD;AAAA;AAAA;AAAA;AAAA,eAAQ;AAAA,SADV;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC;AAAA,QACC,6DAAC;AAAA,UAAQ,IAAI;AAAA,UACX,6DAAC;AAAA,YAAO,WAAW,mDAAC,iBAAAA,SAAA,IAAD;AAAA;AAAA;AAAA;AAAA,mBAAW;AAAA,YAAI;AAAA,aAAlC;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,WAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,SALF;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA;AAAA,KAjBF;AAAA;AAAA;AAAA;AAAA,SAkBA;AAEJ;AAEA,IAAM,YAAY,CAAC,QAAO,UAAS,MAAK,IAAI;AAE7B,SAAR,UAA2B;AAChC,QAAM,WAAW,YAAY;AAE7B,MAAI,gBAAgB,SAAS;AAC7B,MAAI,cAAc,SAAS,GAAG,GAAG;AAE/B,oBAAgB,cAAc,MAAM,GAAE,EAAE;AAAA,EAC1C;AACA,QAAM,WAAW,cAAc,MAAM,GAAG;AACxC,QAAM,UAAU,SAAS,SAAS,SAAO;AACzC,UAAQ,IAAI,wBAAwB,OAAO;AAE3C,MAAI,YAAY;AAChB,MAAI,YAAY,OAAO;AAErB,gBAAY,UAAU,MAAM;AAAA,EAC9B,WAAW,UAAU,QAAQ,OAAO,IAAI,IAAI;AAC1C,gBAAY,UAAU,OAAO;AAAA,EAC/B,OAAO;AAEL,WAAO,aAAa,OAAO;AAAA,EAC7B;AAOA,SACE,mDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,SAAQ;AAEZ;",
  "names": ["ArrowBack"]
}
