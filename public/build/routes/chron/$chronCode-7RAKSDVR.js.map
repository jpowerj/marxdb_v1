{
  "version": 3,
  "sources": ["../../../../node_modules/@mui/icons-material/ContentCopy.js", "empty-module:~/models/event.server", "../../../../app/routes/chron/$chronCode.tsx", "../../../../app/components/eventDetails.tsx"],
  "sourcesContent": ["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"\n}), 'ContentCopy');\n\nexports.default = _default;", "module.exports = {};", "import * as React from 'react';\r\nimport type { LoaderArgs } from \"@remix-run/node\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { useLoaderData, useParams, useFetcher, NavLink } from \"@remix-run/react\";\r\nimport { json } from \"@remix-run/node\";\r\n\r\nimport ArrowBack from '@mui/icons-material/ArrowBack';\r\nimport ArrowForward from '@mui/icons-material/ArrowForward';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport Paper from '@mui/material/Paper';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport MaterialTable, { MTableToolbar, MTableBody, MTableCell, MTableHeader, MTablePagination } from \"@material-table/core\";\r\n\r\nimport { EventDetailsPanel } from '~/components/eventDetails'\r\nimport { getEvent } from '~/models/event.server';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Radio from '@mui/material/Radio';\r\n\r\nexport async function loader({ request, params }: LoaderArgs) {\r\n    invariant(params.chronCode, \"Expected params.chronCode\");\r\n    let chronCode = params.chronCode;\r\n    console.log(\"[$chronCode.tsx] chronCode: \" + chronCode);\r\n    if (chronCode === \"\") {\r\n        // Default to list view\r\n        return { type: 'chron', viewName: \"list\" };\r\n    } else if (viewCodes.indexOf(chronCode) > -1) {\r\n        // Specific view\r\n        return { type: 'chron', viewName: chronCode };\r\n    } else {\r\n        // Assume it's an entry id, and fetch the data for it\r\n        let entryData = await getEvent(chronCode);\r\n        // And compute a monthday field\r\n        entryData.monthday = entryData.month_start + \" \" + entryData.day_start;\r\n        return { type: 'details', chronCode: chronCode, entryData: entryData };\r\n    }\r\n}\r\n\r\nconst openInNewTab = (url: string) => {\r\n    window.open(url, '_blank', 'noopener,noreferrer');\r\n};\r\n\r\nconst viewCodes = ['list', 'cal'];\r\n\r\nfunction EventDetailsPage(entryData: any) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <NavLink to={`../../chron/list`}>\r\n                    <Button startIcon={<ArrowBack />}>\r\n                        Back to Chronicle\r\n                    </Button>\r\n                </NavLink>\r\n            </div>\r\n            <Paper>\r\n                <EventDetailsPanel data={entryData} />\r\n            </Paper>\r\n            <div>\r\n                <div className=\"float-left\">\r\n                <NavLink to={`../../chron/list`}>\r\n                    <Button startIcon={<KeyboardArrowLeft />}>\r\n                        Previous Record\r\n                    </Button>\r\n                </NavLink>\r\n                </div>\r\n                <div className=\"float-right\">\r\n                    <NavLink to={`../../chron/list`}>\r\n                        <Button endIcon={<KeyboardArrowRight />}>\r\n                            Next Record\r\n                        </Button>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ChronTable() {\r\n    const reqData = useLoaderData();\r\n    console.log(\"[ChronTable()] reqData: \" + Object.keys(reqData));\r\n    console.log(\"[ChronTable()] type: \" + reqData.type);\r\n    console.log(\"[ChronTable()] viewType: \" + reqData.viewName);\r\n    if (reqData.type === \"details\") {\r\n        return EventDetailsPage(reqData.entryData);\r\n    }\r\n    // (Otherwise reqData.type === \"chron\")\r\n    const data_cols = [\r\n        { field: \"entry_id_clean\", title: \"ID\", width: \"60px\" },\r\n        { field: \"year\", title: \"Year\", width: \"60px\" },\r\n        { field: \"header\", title: \"Heading\", cellStyle: { width: '120px', maxWidth: '140px' }, headerStyle: { width: '120px', maxWidth: '140px' } },\r\n        { field: \"text\", title: \"Text\", cellStyle: { width: '65%' }, headerStyle: { width: '65%' } },\r\n        { field: \"monthday\", title: \"Date\", width: \"60px\" }\r\n    ];\r\n    const fetcher = useFetcher();\r\n    // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\r\n    React.useEffect(() => {\r\n        if (fetcher.type === \"init\") {\r\n            fetcher.load(`/fetch/chron/10/0`);\r\n        }\r\n    }, [fetcher]);\r\n    /*\r\n    const handleChangePage = (\r\n        event: React.MouseEvent<HTMLButtonElement> | null,\r\n        newPage: number,\r\n    ) => {\r\n        setPage(newPage);\r\n    };\r\n    */\r\n\r\n    /*\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    */\r\n    // MaterialTable documentation:\r\n    // Orig: https://material-table.com/#/\r\n    // Core: https://material-table-core.com/\r\n    // For options:\r\n    // https://github.com/mbrn/material-table.com/blob/master/src/pages/docs/all-props/options.md\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <MaterialTable\r\n                title={\r\n                    <div>\r\n                        <RadioGroup row={true} value={reqData.viewName}>\r\n                            <NavLink to=\"../list\"><FormControlLabel control={<Radio />} label=\"List View\" value=\"list\" /></NavLink>\r\n                            <NavLink to=\"../cal\"><FormControlLabel control={<Radio />} label=\"Calendar View\" value=\"cal\" /></NavLink>\r\n                        </RadioGroup>\r\n                    </div>\r\n                }\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    padding: 'dense',\r\n                    pageSize: 10,\r\n                    pageSizeOptions: [10],\r\n                    columnsButton: true,\r\n                    //showTitle: false,\r\n                    exportAllData: true,\r\n                    initialPage: 0,\r\n                    draggable: false,\r\n                    toolbar: true,\r\n                    //sorting: false,\r\n                    paginationType: 'stepped',\r\n                    numberOfPagesAround: 4\r\n                }}\r\n                columns={data_cols}\r\n                detailPanel={\r\n                    ({ rowData }: any) => <EventDetailsPanel data={rowData} />\r\n                }\r\n                data={(query) =>\r\n                    new Promise((resolve, reject) => {\r\n                        fetch(`/fetch/chron/10/${query.page}`)\r\n                            .then(response => response.json())\r\n                            .then(rsJson => {\r\n                                resolve({\r\n                                    data: rsJson.docs,\r\n                                    page: query.page,\r\n                                    totalCount: rsJson.total,\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                components={{\r\n                    Cell: (props) => (\r\n                        <MTableCell className=\"overflow-hidden text-ellipsis whitespace-nowrap max-w-[350px]\" {...props} />\r\n                    ),\r\n                    Container: (props) => (\r\n                        <Paper className=\"even:[&>*]:grow\" sx={{ display: 'flex', flexDirection: 'column', height: '100%', maxHeight: '100%' }} elevation={1} {...props} />\r\n                    ),\r\n                    Toolbar: (props) => (\r\n                        <Box sx={{ borderBottom: '1px solid rgba(184,184,184,1)' }} className=\"bg-red-700/10\">\r\n                            <MTableToolbar className=\"min-h-[48px]\" {...props} />\r\n                        </Box>\r\n                    ),\r\n                    Body: (props) => (\r\n                        <MTableBody className=\"overflow-hidden text-ellipsis\" {...props} />\r\n                    ),\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => (\r\n                            <InfoIcon />\r\n                        ),\r\n                        tooltip: \"View Full Info\",\r\n                        onClick: (event, rowData) => {\r\n                            //const rowJson = JSON.stringify(rowData, null, 2);\r\n                            //alert(`Do save operation : ${rowJson}`);\r\n                            openInNewTab(`./${rowData.entry_id_clean}`)\r\n                        },\r\n                    },\r\n                ]}\r\n                localization={{\r\n                    pagination: {\r\n                        labelDisplayedRows: '{from}-{to} of {count}'\r\n                    },\r\n                    toolbar: {\r\n                        nRowsSelected: '{0} row(s) selected'\r\n                    },\r\n                    header: {\r\n                        actions: ''\r\n                    },\r\n                    body: {\r\n                        emptyDataSourceMessage: 'No records to display',\r\n                        filterRow: {\r\n                            filterTooltip: 'Filter'\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </TableContainer>\r\n    );\r\n}", "import * as React from 'react';\r\n\r\nimport ArrowBack from '@mui/icons-material/ArrowBack';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Chip from '@mui/material/Chip';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { NavLink } from '@remix-run/react';\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ContentCopy from '@mui/icons-material/ContentCopy';\r\n\r\n/*\r\nlet regCodeDict: { [key: string]: string } = {\r\n    \"marx\": \"Marx\",\r\n    \"engels\": \"Engels\",\r\n    \"me\": \"Marx-Engels Joint Works\",\r\n    \"st\": \"Sources/Translations\",\r\n}\r\nfunction regCodeToAuth(authName: string) {\r\n    return titleDict[authName];\r\n}\r\n*/\r\n\r\n/*\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../chron/\" + chronRefId;\r\n    return (\r\n        <Fab variant=\"extended\" sx={{ boxShadow: 0, border: 1 }} className=\"m-2 p-2 cursor-pointer\" size=\"small\" onClick={() => window.open(relUrl, '_blank', 'noopener,noreferrer')}>\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </Fab>\r\n    );\r\n}\r\n*/\r\n\r\nfunction getChronRefLink(chronRefId: string) {\r\n    let relUrl = \"../../chron/\" + chronRefId;\r\n    return (\r\n        <NavLink to={relUrl} rel=\"noopener,noreferrer\" target=\"_blank\" className=\"m-2 p-2 border border-solid border-black cursor-pointer rounded-full\">\r\n            {\"18\" + chronRefId}\r\n            <OpenInNewIcon sx={{ ml: 1 }} fontSize=\"small\" />\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nfunction getChronRefLinks(chronRefIds: string[]) {\r\n    let y = chronRefIds.map((item: string) => { return getChronRefLink(item)})\r\n    return y.join(\", \")\r\n}\r\n\r\nexport function EventDetailsPanel(props: any) {\r\n    let rowData = props.data;\r\n    //console.log(rowData);\r\n    const [tooltipText, setTooltipText] = React.useState(\"Copy Link\");\r\n    const handleTooltipClose = () => {\r\n        setTooltipText(\"Copy Link\");\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                fontSize: 16,\r\n                padding: 5,\r\n                margin: 5,\r\n            }}\r\n        >\r\n            <Box sx={{ margin: 1 }}>\r\n                <div className=\"grid grid-cols-2 mb-2 items-center\">\r\n                    <Typography variant=\"h5\" className=\"table-cell align-middle font-bold\">\r\n                        {rowData.ymd}\r\n                    </Typography>\r\n                    {rowData.start_approx === \"checked\" &&\r\n                        <Tooltip title=\"Start date is approximate\">\r\n                            <Chip\r\n                                icon={<InfoIcon />}\r\n                                label=\"Approximate\"\r\n                                className=\"m-2 cursor-pointer\"\r\n                            />\r\n                        </Tooltip>\r\n                    }\r\n                    <div className=\"self-center float-right\">\r\n                        <FormControl sx={{ m: 1, width: '36ch' }} variant=\"outlined\" className=\"float-right\">\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\">Permalink</InputLabel>\r\n                            <OutlinedInput\r\n                                id=\"outlined-adornment-password\"\r\n                                className=\"float-right\"\r\n                                value={`https://marxdb.com/chron/${rowData.entry_id_clean}`}\r\n                                disabled\r\n                                type={'text'}\r\n                                size={'small'}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <Tooltip title={tooltipText}>\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            edge=\"end\"\r\n                                            onClick={() => {\r\n                                                //alert('clicked');\r\n                                                navigator.clipboard.writeText(`https://marxdb.com/chron/${rowData.entry_id_clean}`).then(\r\n                                                    function () {\r\n                                                        /* clipboard successfully set */\r\n                                                        console.log('Success! The text was copied to your clipboard');\r\n                                                        setTooltipText(\"Link Copied!\");\r\n                                                    },\r\n                                                    function () {\r\n                                                        /* clipboard write failed */\r\n                                                        console.log('Oops! Your browser does not support the Clipboard API');\r\n                                                    }\r\n                                                )\r\n                                            }}\r\n                                        >\r\n                                            {<ContentCopy />}\r\n                                        </IconButton>\r\n                                        </Tooltip>\r\n                                    </InputAdornment>\r\n                                }\r\n                                label=\"Permalink\"\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                </div>\r\n                <Table size=\"small\" aria-label=\"details\">\r\n                    <TableBody>\r\n                        <TableRow key='header' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Heading\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-bold\">{rowData.header}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='desc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                            <TableCell\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                sx={{ fontWeight: 'bold' }}\r\n                            >\r\n                                Description\r\n                            </TableCell>\r\n                            <TableCell colSpan={5} className=\"font-mono\">{rowData.text}</TableCell>\r\n                        </TableRow>\r\n                        <TableRow key='dates'>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Written\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {rowData.written}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Dated\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"dated\") > - 1 ? rowData.dated : \"NA\"}\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold' }}>\r\n                                Published\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {Object.keys(rowData).indexOf(\"published\") > - 1 ? rowData.published : \"NA\"}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {(Object.keys(rowData).indexOf(\"lang_orig\") > -1) &&\r\n                            <TableRow key='langs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Language(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.lang_orig.join(\", \")}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"source\") > -1) &&\r\n                            <TableRow key='sources' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Source(s)\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.source}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"reprint\") > -1) &&\r\n                            <TableRow key='reprints' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Reprints\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.reprint}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"more_info\") > -1) &&\r\n                            <TableRow key='misc' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Misc\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.more_info}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                        {(Object.keys(rowData).indexOf(\"chron_ref_ids\") > -1) &&\r\n                            <TableRow key='chronrefs' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    sx={{ fontWeight: 'bold' }}\r\n                                >\r\n                                    Chronicle References\r\n                                </TableCell>\r\n                                <TableCell colSpan={5}>{rowData.chron_ref_ids.map((item: string) => getChronRefLink(item))}</TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Box>\r\n        </div>\r\n    );\r\n}"],
  "mappings": "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",
  "names": ["React", "import_Info", "OpenInNewIcon", "InfoIcon", "ContentCopy", "ArrowBack", "KeyboardArrowLeft", "KeyboardArrowRight", "MaterialTable", "InfoIcon"]
}
