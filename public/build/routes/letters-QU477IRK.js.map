{
  "version": 3,
  "sources": ["../../../app/routes/letters.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { useTheme, withStyles } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport Collapse from '@mui/material/Collapse';\n\nimport Chip from '@mui/material/Chip';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Toolbar from '@mui/material/Toolbar';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nimport MaterialTable from \"@material-table/core\";\nimport MTableToolbar from '@material-table/core';\n\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData, useFetcher } from \"@remix-run/react\";\nimport { getDocinfoListItems } from \"~/models/docinfo.server\";\n\nconst defaultPerPage = 3;\nconst defaultPageNum = 0;\n\nexport async function loader({ request }: LoaderArgs) {\n  const docinfoListItems = await getDocinfoListItems();\n  return json({ docinfoListItems });\n}\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number,\n  ) => void;\n}\n\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\n\nfunction createData(\n  id: string,\n  title: string\n) {\n  return {\n    id,\n    title,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nfunction Row(props: { data: ReturnType<typeof createData> }) {\n  const { data } = props;\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\" sx={{ maxWidth: 100, overflowX: 'clip' }}>\n          {data.id}\n        </TableCell>\n        <TableCell>\n          {data.title}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Text Info\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nconst EnhancedTableToolbar = () => {\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n      }}\n    >\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h5\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Marx-Engels Digital Register\n      </Typography>\n    </Toolbar>\n  );\n};\n\nexport default function CollapsibleTable() {\n  const initData = useLoaderData<typeof loader>();\n  const fetcher = useFetcher();\n  // See https://remix.run/docs/en/v1/api/remix#fetchersubmit\n\n  React.useEffect(() => {\n    if (fetcher.type === \"init\") {\n      fetcher.load(`/fetch/gloss/${defaultPerPage}/${defaultPageNum}`);\n    }\n  }, [fetcher]);\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rowsOnPage, setRowsOnPage] = React.useState(5);\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rowsOnPage) : 0;\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const DEMO_DATA = [\n    { id: 1, name: \"Mary\" },\n    { id: 2, name: \"Joe\" },\n    { id: 3, name: \"Jim\" },\n    { id: 4, name: \"Bob\" },\n    { id: 5, name: \"Bernie\" },\n    { id: 6, name: \"Jimbo\" },\n  ];\n  const DEMO_COLS = [\n    { field: \"id\", title: \"Id\" },\n    { field: \"title\", title: \"Title\" },\n  ];\n  return (\n    <div>\n    {fetcher.type !== \"done\" ? <span>Loading...</span> :\n        <MaterialTable\n          columns={DEMO_COLS}\n          detailPanel={\n            ({ rowData }) => {\n              console.log(rowData);\n              return (\n                <div\n                  style={{\n                    fontSize: 16,\n                    padding: 5,\n                    margin: 5,\n                  }}\n                >\n                  <Box sx={{ margin: 1 }}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                      {rowData.title}\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"details\">\n                      <TableBody>\n                        <TableRow key='fulltext' sx={{ borderTop: '1px solid rgba(224, 224, 224, 1)' }}>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              Full Text\n                            </TableCell>\n                            <TableCell colSpan={3}>{rowData.fullText}</TableCell>\n                          </TableRow>\n                          <TableRow key='dates'>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Written\n                            </TableCell>\n                            <TableCell>\n                              1/1/1850\n                            </TableCell>\n                            <TableCell sx={{ fontWeight: 'bold' }}>\n                              Date Published\n                            </TableCell>\n                            <TableCell>\n                              1/2/1850\n                            </TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </Box>\n                </div>\n              );\n            }\n          }\n          data={fetcher.data.result}\n          /*\n          components={{\n            Toolbar: (props: any) => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: '0px 10px' }}>\n                  <Chip label=\"Chip 1\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 2\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 3\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 4\" color=\"secondary\" style={{ marginRight: 5 }} />\n                  <Chip label=\"Chip 5\" color=\"secondary\" style={{ marginRight: 5 }} />\n                </div>\n              </div>\n            ),\n          }}\n          */\n        />\n    }\n    </div>\n  );\n}"],
  "mappings": "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",
  "names": ["MaterialTable"]
}
